rh._.exports({"0":[["BlockingQueue"]],"1":[["\n"],["\n","Eine BlockingQueue kann benutzt werden, um von einem \n ","ThreadPool"," (s.o.) zu bearbeitende \"Aufgaben\" \n an die Arbeits-Threads zu verteilen. Ein \"Generator\"-Thread \n (meist der Haupt-Thread des Jobs) erzeugt \"Aufgaben\"-Objekte \n und legt sie in die Queue. Jeder \"Arbeits\"-, hier oft auch als \n \"Verbraucher\"-Thread bezeichnet, entnimmt in einer Schleife \n je eine \"Aufgabe\" aus der Queue und erledigt sie. Hat der \"Generator\" \n keine weiteren Aufgaben zu erzeugen, \"schließt\" er die Queue, \n indem er eine \"null\"-Aufgabe hinein legt. Sind alle \"Aufgaben\" \n abgearbeitet und die Queue geschlossen, enden die \"Verbraucher\"-Threads.","\n","Die Kapazität einer BlockingQueue kann begrenzt und \n damit vermieden werden, dass die Queue und somit deren Speicher-Verbrauch \n unendlich anwachsen kann. Ist eine begrenzte Queue voll, muss der Generator \n darauf warten, dass einer der Verbraucher wieder eine Aufgabe entnimmt, \n bevor er eine neue Aufgabe hineinlegen kann.","\n","Eine BlockingQueue hat folgende Eingenschaften und \n Funkionen:","\n","Konstruktor new BlockingQueue(capacity)","\n","Erzeugt eine neue Queue. Falls der Parameter capacity \n angegeben wird, ist die Queue auf die entsprechende Anzahl Einträge begrenzt. \n Diese Begrenzung kann später nicht mehr geändert oder auch nur abgefragt \n werden.","\n","put(object)","\n","Legt ein Objekt in die Queue. Ist die Länge der Queue \n begrenzt und die Queue voll, wartet diese Funktion so lange, bis darin \n wieder Platz ist (d.h. ein anderer Thread ein Objekt entnommen hat). Aufruf \n dieser Funktion ohne Übergabe eines Objekts oder Übergabe von null schließt \n die Queue.","\n","boolean offer(object, millis)","\n","Hängt das angegebene Objekt an die Queue an, sofern \n das in der angegebenen Zeitspanne möglich ist. Ist die Queue begrenzt \n und voll, wartet diese Funktion die als millis angegebene Anzahl Millisekunden \n auf freien Platz darin. Falls kein Platz frei wird, liefert die Funktion \n false als Ergebnis. Wird der Parameter millis weggelassen, kehrt die Funktion \n bei voller Queue sofort mit Ergebnis false zurück.","\n","Object take()","\n","Entnimmt das erste (älteste) Objekt aus der Queue und \n liefert es als Ergebnis. Ist die Queue leer, wartet diese Funktion darauf, \n dass ein Objekt hineingelegt wird. Ist die Queue geschlossen und leer, \n liefert diese Funktion bei jedem Aufruf das Ergebnis null.","\n","Object poll(millis)","\n","Ist die Queue nicht leer, entnimmt diese Funktion das \n erste Objekt daraus und liefert es als Ergebnis. Ist die Queue leer und \n wurde der Parameter millis angegeben, wartet die Funktion die angegebene \n Anzahl Millisekunden auf ein neues Objekt in der Queue und liefert gegebenenfalls \n dieses Objekt zurück. Wurde keine Wartezeit angegeben oder ist die Queue \n auch nach deren Ablauf leer, liefert die Funktion null zurück. Ist die \n Queue leer und geschlossen, kehrt die Funktion sofort mit Ergebnis null \n zurück.","\n","Eigenschaft done (boolean, readoly):","\n","Ist true, wenn die Queue geschlossen und leer ist, \n davor immer false.","\n\n\n"]],"3":[["BlockingQueue"]],"id":"46"})