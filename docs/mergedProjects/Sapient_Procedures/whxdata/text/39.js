rh._.exports({"0":[["HttpCon"]],"1":[["\n"],["\n","Dient zum Durchführen von Abfragen. ","\n","Beispiel:","\n","function sendFromDir(dir) {","\n","   logger.info(\"Sending all files \n from directory \" + dir.absolutePath);","\n","   var files = dir.list();","\n","   if (files) {","\n","         while \n (files.length) {","\n","               var \n file = new File(dir, files.shift());","\n","               logger.info(\"Sending \n file \" + file.name);","\n","               var \n con = new HttpCon(\"http://localhost/WebApp/upload/service/bcs/tord.xml\");","\n","               try \n {","\n","                    con.doInput \n = true;","\n","                    con.doOutput \n = true;","\n","                    con.useCaches \n = false;","\n","                     con.instanceFollowRedirects \n = false;","\n","                    con.method \n = con.METHOD_POST;","\n","                    con.setHeader(con.HEADER_CHARSET, \n 'UTF-8');","\n","                    con.setHeader(con.HEADER_CONTENTTYPE, \n 'text/xml; charset=utf-8');","\n","                    con.setHeader('Accept', \n 'text/xml');","\n","                    con.setBasicAuthHeader(\"dh\", \n \"***\");","\n","                    con.setProxyAuthHeader(\"dh\", \n \"***\");","\n","                    logger.debug('Authorization \n header: ' + con.getHeader('Authorization'));","\n","                    var \n out = con.getRequestPrinter();","\n","                    try \n {","\n","                          out.print('<?xml \n version=\"1.0\" encoding=\"UTF-8\"?>\\n');","\n","                          var \n line;","\n","                          while \n ((line = file.readLine()) != null) {","\n","                                out.println(line);","\n","                          }","\n","                          out.flush();","\n","                          var \n rdr = con.getResponseReader();","\n","                          try \n {","\n","                                logger.debug(\"Response:\")","\n","                                var \n line;","\n","                                while \n ((line = rdr.readLine())) {","\n","                                      logger.debug(\"    \" \n + line);","\n","                                }","\n","                          } \n finally {","\n","//                              rdr.close();","\n","                          }","\n","                    } \n finally {","\n","                          out.close();","\n","                    }","\n","               } \n finally {","\n","//                  con.close();","\n","                    file.close();","\n","               }","\n","         }","\n","   }","\n","}","\n"," ","\n","Beim Anlegen eines Objekts mittels new HttpCon(Url) \n wird die URL direkt übergeben.","\n"," ","\n","HttpCon hat folgende statische Eigenschaften:","\n","Headers:","\n","HEADER_CHARSET","\n","HEADER_CONTENTTYPE","\n"," ","\n","Methods:","\n","METHOD_DELETE","\n","METHOD_GET","\n","METHOD_HEAD","\n","METHOD_OPTIONS","\n","METHOD_POST","\n","METHOD_PUT","\n","METHOD_TRACE","\n"," ","\n","Rückgabewerte:","\n","HTTP_OK","\n","HTTP_CREATED","\n","HTTP_ACCEPTED","\n","HTTP_NOT_AUTHORITATIVE","\n","HTTP_NO_CONTENT","\n","HTTP_RESET","\n","HTTP_PARTIAL","\n","HTTP_MULT_CHOICE","\n","HTTP_MOVED_PERM","\n","HTTP_MOVED_TEMP","\n","HTTP_SEE_OTHER","\n","HTTP_NOT_MODIFIED","\n","HTTP_USE_PROXY","\n","HTTP_BAD_REQUEST","\n","HTTP_UNAUTHORIZED","\n","HTTP_PAYMENT_REQUIRED","\n","HTTP_FORBIDDEN","\n","HTTP_NOT_FOUND","\n","HTTP_BAD_METHOD","\n","HTTP_NOT_ACCEPTABLE","\n","HTTP_PROXY_AUTH","\n","HTTP_CLIENT_TIMEOUT","\n","HTTP_CONFLICT","\n","HTTP_GONE","\n","HTTP_LENGTH_REQUIRED","\n","HTTP_PRECON_FAILED","\n","HTTP_ENTITY_TOO_LARGE","\n","HTTP_REQ_TOO_LONG","\n","HTTP_UNSUPPORTED_TYPE","\n","HTTP_INTERNAL_ERROR","\n","HTTP_NOT_IMPLEMENTED","\n","HTTP_BAD_GATEWAY","\n","HTTP_UNAVAILABLE","\n","HTTP_GATEWAY_TIMEOUT","\n","HTTP_VERSION","\n"," ","\n","Objekte vom Typ HttpCon haben folgende Eigenschaften:","\n","doInput:","\n","Boolean; gibt an, ob Daten im Telegramm zu senden sind \n (bei GET üblicherweise false, bei POST üblicherweise true).","\n","doOutput:","\n","Boolean; gibt an, ob Daten im Telegramm zu empfangen \n sind (bei GET üblicherweise true, bei POST üblicherweise false).","\n","useCaches:","\n","Boolean; gibt an, ob die HTTP-Daten gecached werden \n dürfen.","\n","instanceFollowRedirects:","\n","Boolean; gibt an, ob Redirect-Antworten des Servers \n automatisch ausgewertet werden sollen, z.B. wenn mehrere Server die Last \n aufteilen sollen oder um HTTP auf HTTPS umzuleiten.","\n","method:","\n","HTTP-Methode. Wert einer der folgenden Eigenschaften \n von HttpCon:","\n","METHOD_GET","\n","METHOD_POST","\n","METHOD_PUT","\n","METHOD_DELETE","\n","METHOD_HEAD","\n","METHOD_OPTIONS","\n","METHOD_TRACE","\n"," ","\n","charset:","\n","Name des Zeichensatzes der empfangenen Daten.","\n","contentType:","\n","Art der empfangenen HTTP-Daten.","\n","responseLength:","\n","Länge des Rückgabewerts.","\n","responseText:","\n","Text des Rückgabewerts.","\n","errorText:","\n","Öffnet einen internen Reader zum Lesen des Rückgabewerts.","\n"," ","\n","Objekte vom Typ HttpCon haben folgende Funktionen:","\n","setHeader(Name, Wert):","\n","Setzt den entsprechenden HTTP-Header der Anfrage. \"Name\" \n kann auch eine der Eigenschaften HEADER_CHARSET oder HEADER_CONTENTTYPE \n sein.","\n","setBasicAuthHeader(Name, Passwort):","\n","Übergibt die Authentifizierungsdaten.","\n","setProxyAuthHeader(Name, Passwort):","\n","Übergibt Authentifizierungsdaten für Proxies.","\n","getHeader(Name):","\n","Liest den HTTP-Header aus der Anfrage.","\n","getResponseHeader(Name):","\n","Liest den HTTP-Header aus der Antwort.","\n","getRequestPrinter():","\n","Liefert einen Printer zum Schreiben des Anfrage-Textkörpers.","\n","getResponseReader():","\n","Liefert einen Reader zum Lesen des Antwort-Textkörpers.","\n","getResponseSaxInput():","\n","Liefert einen SaxInput, um den Antwort-Body von einem \n SaxReader verarbeiten zu lassen.","\n","open(url):","\n","Wird nur benötigt, wenn beim Anlegen des Objekts keine \n URL angegeben wurde.","\n","connect():","\n","Baut die Verbindung auf. Die HTTP-Anfrage wird erst \n gesendet, wenn Anfragedaten fertig geschrieben sind und die erste Funktion \n benutzt wird, die die Antwort lesen will.","\n","disconnect():","\n","Trennt die Verbindung.","\n","close():","\n","Schließt die Verbindung.","\n","uploadFile():","\n","Ermöglicht das Hochladen einer Datei auf einen Webserver \n aus einem Skript in der SE.","\n","Beispiel:","\n","/**","\n"," *","\n"," */","\n","loader.include('../common/jsutils.js');","\n","function uploadFile(context, pars) {","\n","context.logger.info('uploadFile raw params: ' + JSON.stringify(pars));","\n","var params = jsonRpcArgsHash(arguments, [\"url\", \n \"file\", \"password\", \"user\", \"fieldname\", \n \"filename\", \"contenttype\", \"formfields\", \n \"headers\"]);","\n","context.logger.info('uploadFile params: ' + JSON.stringify(params));","\n","var upurl = params.url || 'http://localhost:8080/app/file';","\n","var upfile = params.file || 'C:\\\\DevDat\\\\Git\\\\sapient-engine\\\\src\\\\dist\\\\scripts\\\\examples\\\\upload.js';","\n"," ","\n","var upars = {","\n","fieldname: 'file', // expected by Sapient upload service","\n","contenttype: 'text/javascript;charset=UTF-8',","\n","filename: 'testupload.js',","\n","};","\n"," ","\n","var xhr = new HttpCon(upurl);","\n","// set HTTP user","\n","if (params.password) {","\n","var upusr = params.user || context.user.name;","\n","// context.logger.info('uploadFile setting auth to \n user \"' + upusr + '/' + params.password + '\"');","\n","xhr.setBasicAuthHeader(upusr, params.password);","\n","}","\n","var result = xhr.uploadFile(upfile, upars);","\n","context.logger.info('uploadFile result: ' + JSON.stringify(result));","\n","return true;","\n","}","\n\n\n"]],"3":[["HttpCon"]],"id":"39"})