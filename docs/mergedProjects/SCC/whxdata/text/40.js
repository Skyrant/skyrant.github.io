rh._.exports({"0":[["Mathematische Funktionen"]],"1":[["\n"],["\n"],["\n","\n","Deklaration: double Exp(double x)","\n","Berechnet die Exponentialfunktion e","x",".","\n","Beispiel",":","\n","double   d","\n","d := exp(1)","\n","debug(DToStr(d))","\n"," ","\n"],["\n","\n","Deklaration: double Ln(double x)","\n","Berechnet den natürlichen Logarithmus des Arguments \n ","x",".","\n","Beispiel",":","\n","double   d","\n","d := ln(2.718281)","\n","debug(DToStr(d))","\n"," ","\n"],["\n","\n","Deklaration: double Log(double x)","\n","Berechnet den Logarithmus des Arguments ","x"," zur \n Basis 10.","\n","Beispiel",":","\n","double   d","\n","d := log(100)","\n","debug(DToStr(d))","\n"," ","\n"],["\n","\n","Deklaration: double Pi","\n","Liefert die Zahl Pi als Double-Wert.","\n","Beispiel",":","\n","double   d","\n","d := 2 * pi","\n","debug(DToStr(d))","\n"," ","\n"],["\n","\n","Deklaration: double Pow(double x, double y)","\n","Pow liefert das Ergebnis der Berechnung ","x","y",".","\n","Beispiel",":","\n","double   d","\n","d := KGToD(OPC.GOPS.PLC1.Length)","\n","d := pow(d, 3)","\n","debug(DToStr(d))","\n"," ","\n"],["\n","\n","Deklaration: long Round(double x, bool up)","\n","Rundet den Double-Wert ","x"," und liefert als Ergebnis \n einen Long-Wert. Ist ","up"," = true wird aufgerundet, sonst abgerundet.","\n","Beispiel",":","\n","double   d","\n","long      up, down","\n","d   := 123.45","\n","up   := round(d, true)","\n","down := round(d, false)","\n","debug('Rounded up   : ' + DToStr(up))","\n","debug('Rounded down : ' + DToStr(down))","\n"," ","\n"],["\n","\n","Deklaration: double Sqrt(double x)","\n","Berechnet die Quadratwurzel des Arguments ","x",".","\n","Beispiel",":","\n","double   d, r","\n","string   s","\n","d := 100.0","\n","r := sqrt(d)","\n","s := printf('The squareroot of %s is %s',","\n","            DToStr(d), \n DToStr(r))","\n","debug(s)","\n"," ","\n\n\n"]],"2":[["Mathematische Funktionen"]],"4":[["Exp"],["Ln"],["Log"],["Pi"],["Pow"],["Round"],["Sqrt"]],"id":"40"})