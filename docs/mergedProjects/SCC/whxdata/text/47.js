rh._.exports({"0":[["Stringoperationen"]],"1":[["\n"],["\n"," ","\n"],["\n","\n","Deklaration: string CutStr(string s, string c, long \n n, bool back)","\n","Sucht in dem angegebenen String ","s"," \n nach dem ","n","-ten Vorkommen des Zeichens \n ","c"," und löscht die Zeichen bis zu \n dieser Stelle. ","Back"," gibt dabei \n die Richtung an: bei true wird von rechts gezählt und gelöscht, bei false \n von links.","\n","Beispiel",":","\n","String   s","\n","s := CutStr('c:\\\\projekte\\\\legato\\\\Cloud Connector\\\\projekt1.lpr', \n '\\\\', 1, true) ","\n"," ","\n"],["\n","\n","Deklaration: string GetCol(string s, long r, long \n c)","\n","Liefert den Wert der Spalte ","c"," der Zeile ","r"," \n des angegebenen Strings ","s"," (Format s: CSV).","\n","Beispiel",":","\n","String   s","\n","s := GetCol('\"Field_1_1\", \"Field_1_2\"' \n + '\\n' +","\n","            '\"Field_2_1\", \n \"Field_2_2\"' + '\\n', 2, 1)","\n"," ","\n"],["\n","\n","Deklaration: string GetColByName(string s, long \n r, string c)","\n","Liefert den Wert der Spalte ","c"," der Zeile ","r"," \n des angegebenen Strings ","s"," (Format s: CSV). In der ersten Zeile \n müssen alle Spaltennamen stehen!","\n","Beispiel",":","\n","String   s","\n","s := GetCol('\"Col_1\" + \"Col_2\"' \n + '\\n' +","\n","            '\"Field_1_1\" \n + \"Field_1_2\"' + '\\n' +","\n","            '\"Field_2_1\" \n + \"Field_2_2\"' + '\\n',  2, 1)","\n"," ","\n"],["\n","\n","Deklaration: long ","GetColCnt","(string \n s)","\n","Liefert die Anzahl der Spalten des angegebenen Strings \n ","s"," (Format s: CSV).","\n","Beispiel",":","\n","long     c","\n","c := GetColCnt('\"Col_1\", \"Col_2\"' \n + '\\n')","\n"," ","\n"],["\n","\n","Deklaration: string GetRow(string s, long r)","\n","Liefert die Zeile ","r"," des angegebenen Strings \n ","s"," (Format s: CSV).","\n","Beispiel",":","\n","String   s","\n","s := GetRow('\"Row_1\"' + '\\n' + '\"Row_2\"' \n + '\\n', 2)","\n"," ","\n"],["\n","\n","Deklaration: long ","GetRowCount","(string \n s)","\n","Liefert die Anzahl der Zeilen des angegebenen Strings \n ","s"," (Format s: CSV).","\n","Beispiel",":","\n","long     r","\n","r := GetRowCnt('\"Row_1\"' + '\\n' + '\"Row_2\"' \n + '\\n')","\n"," ","\n"],["\n","\n","Deklaration: string GetVarStr(pointer addr, long \n size)","\n","Liest einen String aus dem Variablenbereich des Scripts, \n der mit der Adresse ","addr"," beginnt. ","size"," bezeichnet dabei \n die Anzahl der Bytes, die gelesen werden sollen.","\n","Beispiel",":","\n","struct   b","\n","begin","\n","  long l","\n","  char c[80]","\n","end","\n","string   s","\n","b.l := 26","\n","SetVarStr('ABCDEFGHIJKLMNOPQRSTUVWXYZ', &b.c, \n 26)","\n","s := GetVarStr(&b.c, 10)","\n"," ","\n"],["\n","\n","Deklaration: SetVarStr(string x, pointer addr, long \n size)","\n","Schreibt den String ","x"," in den Variablenbereich \n des Scripts, der mit der Adresse ","addr"," beginnt. ","size"," bezeichnet \n dabei die Anzahl der Bytes, die geschrieben werden sollen.","\n","Beispiel",":","\n","struct   b","\n","begin","\n","  long l","\n","  char c[80]","\n","end","\n","b.l := 26","\n","SetVarStr('ABCDEFGHIJKLMNOPQRSTUVWXYZ', &b.c, \n 26)","\n"," ","\n"],["\n","\n","Deklaration: string StrDel(string source, long pos, \n long len)","\n","Löscht aus dem String ","source"," ab der Position \n ","pos"," ","len"," Bytes und liefert das Ergebnis. ","source"," wird \n dabei nicht verändert.","\n","Beispiel",":","\n","string   s","\n","s := 'ABCDxxxEFGH'","\n","debug(StrDel(s, 4, 3))","\n"," ","\n"],["\n","\n","Deklaration: string StrIns(string source,","\n                           string \n ins, long pos)","\n","Fügt den String ","ins"," in den String ","source"," \n ab der Position ","pos"," ein und liefert das Ergebnis. ","source"," \n wird dabei nicht verändert.","\n","Beispiel",":","\n","string   s","\n","s := 'ABCFGH'","\n","debug(StrIns(s, 'DE', 3))","\n"," ","\n"],["\n","\n","Deklaration: long StrLen(string source)","\n","Liefert die Länge des Strings ","source"," ohne das \n abschließende Nullzeichen.","\n","Beispiel",":","\n","string   s","\n","s := Value.String1","\n","while StrLen(s) < 20 do","\n","  s := s + 'x'","\n","debug(s)","\n","enddo","\n"," ","\n"],["\n","\n","Deklaration: string StrLower(string source)","\n","Konvertiert sämtliche Großbuchstaben des Strings ","source"," \n in Kleinbuchstaben und liefert das Ergebnis. ","source"," wird dabei \n nicht verändert. Es werden die Buchstaben A - Z konvertiert.","\n","Beispiel",":","\n","string    s","\n","s := 'ABcDEfGH'","\n","debug(StrLower(s))","\n"," ","\n"],["\n","\n","Deklaration: string StrLTrim(string source)","\n","Löscht alle führenden Leerzeichen (beginnend von links) \n aus dem String source und liefert das Ergebnis. source wird dabei nicht \n verändert.","\n","Beispiel",":","\n","string s","\n","s := '  ABC DE  FGH  '","\n","debug(StrLTrim(s))      // \n liefert 'ABC DE  FGH  '","\n"," ","\n"],["\n","\n","Deklaration: long StrPos(string source,","\n                         string \n find)","\n","Sucht den String ","source"," nach dem ersten Vorkommen \n des Strings ","find"," ab. Wurde ein Vorkommen gefunden, wird die Position \n zurückgeliefert, ansonsten -1.","\n","Beispiel",":","\n","string   s","\n","s := 'ABCDEFGH'","\n","if StrPos(s, 'DE') >= 0 then","\n","  debug('DE is part of the string')","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: string StrRead(string path)","\n","Liest die durch path festgelegte Textdatei und liefert den Inhalt als \n Ergebnis.","\n","Beispiel",":","\n","string s","\n","s := StrRead('c:\\\\projects\\\\recipe.txt')","\n"," ","\n"],["\n","\n","Deklaration: string StrReplace(string source,","\n                         string \n find, string replace)","\n","Sucht den String ","source"," nach allen Vorkommen \n des Teilstrings ","find"," ab und ersetzt diese durch ","replace",".","\n","Beispiel",":","\n","string   src, res","\n"," ","\n","src := 'Der Wert xxxx ist gleich xxxx'","\n","res := strreplace(scr, 'xxxx', '1234')","\n"," ","\n"],["\n","\n","Deklaration: string StrRTrim(string source)","\n","Löscht alle abschließenden Leerzeichen (beginnend von \n rechts) aus dem String source und liefert das Ergebnis. source wird dabei \n nicht verändert.","\n","Beispiel",":","\n","string s","\n","s := '  ABC DE  FGH  '","\n","debug(StrRTrim(s))      // \n liefert '  ABC DE  FGH'","\n"," ","\n"],["\n","\n","Deklaration: string StrToJson(string source)","\n","Formatiert den übergegeben String source so, dass er \n als Stringwert in einem JSON Objekt verwendet werden kann, und liefert \n das Ergebnis. source wird dabei nicht verändert.","\n","Beispiel",":","\n","string s","\n","s := '\"This is the source\"'","\n","debug(StrToJson(s))","\n"," ","\n"],["\n","\n","Deklaration: string StrToken(string source,","\n                             string \n delim, long n)","\n","Liest aus dem String ","source"," das ","n","-te \n Wort. Jedes einzelne Zeichen, das im String ","delim"," vorkommt, wird \n als Trennzeichen verwendet.","\n",":","\n","Als Trennzeichen dürfen keine Escape-Sequenzen \n angegeben werden, z.B. Zeilenumbruchsteuerung mit \\n\\r. Die ordnungsgemäße \n Ausführung des Befehls ist dabei nicht gewährleistet!","\n","Beispiel",":","\n","string   s","\n","s := 'one,two,THREE,four,five'","\n","debug('01: ' + StrToken(s, ',', 3))  ","// Ausgabe des 3. Worts 'THREE'","\n","s := 'one,two,three,four,FIVE'","\n","debug('02: ' + StrToken(s, ',', 10)) ","// \n Ausgabe des letzten Worts, wenn Anzahl","\n","                                     ","// Worte nicht ausreichend ist","\n","s := ',one,TWO,three,four,five'","\n","debug('03: ' + StrToken(s, ',', 3))  ","// String beginnt mit Delimiter: 1. Wort ist","\n","                                     ","// leer","\n","s := 'one,two,three,four,five,'","\n","debug('04: ' + StrToken(s, ',', 10)) ","// \n Ausgabe von Leerstring, wenn Anzahl Worte","\n","                                     ","// nicht ausreicht und letztes Zeichen","\n","                                     ","// Trennzeichen ist","\n","s := 'one,two,,,FIVE,'","\n","debug('05: ' + StrToken(s, ',', 5))  ","// Unmittelbar aufeinanderfolgende Delimiter","\n","                                     ","// werden als leeres Wort gezählt","\n","s := 'ONE,TWO,THREE,FOUR,FIVE,'","\n","debug('06: ' + StrToken(s, '_', 3))  ","// Kommt der Delimiter im String nicht vor,","\n","                                     ","// wird der gesamte String ausgegeben","\n","s := 'one,two,three_FOUR,five'","\n","debug('07: ' + StrToken(s, ',_', 4)) ","// \n Jedes angegebene Zeichen im delim wird","\n","                                     ","// als eigener Delimiter verwendet","\n"," ","\n"],["\n","\n","Deklaration: long StrTokenCnt(string source, string token)","\n","Ermittelt die Anzahl, wie oft der Teilstring ","token"," \n in dem ","source"," vorkommt.","\n","Beispiel:","\n","string   s","\n","s := 'one,two,red, three,red,four,five,six,seven,red'","\n","debug('cnt: ' + LToStr(StrTokenCnt(s, 'red'),10)  // Ausgabe der \n Anzahl von 'red' in s","\n"," ","\n"],["\n","\n","Deklaration: string StrTrim(string source)","\n","Löscht alle Leerzeichen aus dem String ","source"," \n und liefert das Ergebnis. ","source"," wird dabei nicht verändert.","\n","Beispiel",":","\n","string   s","\n","s := ' ABC DE  FGH '","\n","debug(StrTrim(s))","\n"," ","\n"],["\n","\n","Deklaration: string StrUpper(string source)","\n","Konvertiert sämtliche Kleinbuchstaben des String ","source"," \n in Großbuchstaben und liefert das Ergebnis. ","source"," wird dabei nicht \n verändert. Es werden die Buchstaben A - Z konvertiert.","\n","Beispiel",":","\n","string   s","\n","s := 'ABcDEfGH'","\n","debug(StrUpper(s))","\n"," ","\n"],["\n","\n","Deklaration: StrWrite(string path, string content)","\n","Schreibt den String content in die durch path festgelegte Textdatei. \n Die Datei wird neu erzeugt bzw. vollständig überschrieben, falls sie bereits \n existiert.","\n","Beispiel",":","\n","string s","\n","s := 'This is the content'","\n","StrWrite('c:\\\\projects\\\\recipe.txt', s)","\n"," ","\n"],["\n","\n","Deklaration: string SubStr(string source, long pos,","\n                           long \n len)","\n","Kopiert aus dem String ","source"," ab der Position \n ","pos"," ","len"," Bytes. ","source"," wird dabei nicht verändert.","\n","Nach dem Aufruf von Prozeduren wird der Status vom \n Interpreter zurückgesetzt, um sicherzustellen, dass Operatoren wie Minus \n richtig erkannt werden. Bei Return-Werten wird der Status ebenfalls gezielt \n gesetzt, so dass auch negative Werte übergeben werden können. Der Returnwert \n muss dabei ohne Leerzeichen nach dem Minus übergeben werden, z.B. \"return \n -3\".","\n","Beispiel",":","\n","string   s","\n","s := 'AAABBBCCC'","\n","debug(The first three digits: ' + SubStr(s, 0, \n 3))","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n"," ","\n\n\n"]],"2":[["Stringoperationen"]],"4":[["CutStr"],["GetCol"],["GetColByName"],["GetColCnt"],["GetRow"],["GetRowCnt"],["GetVarStr"],["SetVarStr"],["StrDel"],["StrIns"],["StrLen"],["StrLower"],["StrLTrim"],["StrPos"],["StrRead"],["StrReplace"],["StrRTrim"],["StrToJson"],["StrToken"],["StrTokenCnt"],["StrTrim"],["StrUpper"],["StrWrite"],["SubStr"]],"id":"47"})