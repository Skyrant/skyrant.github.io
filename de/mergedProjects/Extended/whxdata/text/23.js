rh._.exports({"0":[["Formeln"]],"1":[["\n"],["\n"],["\n","Formeln \n sind ein hilfreiches Tool für flexible Berechnungen. Sie sind sehr ähnlich \n zu den Formeln in Excel. Die Anwendung basiert auf der Open Source Bibliothek \n ","formula.js."," Das macht die Verwendung der Formeln in Binding-Ausdrücken \n sehr intuitiv und sollte alle Nutzern, die bereits mit Formeln in Excel \n gearbeitet haben, vertraut sein. Eine detaillierte Erklärung, wie Formeln \n erstellt werden können, sollte hier also nicht nötig sein – die umfangreiche \n Wissensgrundlage im Internet ist in diesem Fall viel hilfreicher!","\n","Ein Überblick \n über alle unterstützten Funktionen kann auf der formula.js Website"," \n ","Functions | Formula.js"," \n ","gefunden werden:","\n","\n"],["\n","Formeln können als Datenobjekte \n definiert werden. Das Referenzieren von anderen Datenobjekten funktioniert, \n indem einfach der Name der Datenobjekte verwendet wird. Das folgende Beispiel \n hat die gleiche Funktionalität wie das zuvor für Berechnungen gezeigte.","\n","{","\n","    \"datasources\": \n {","\n","        \"n1\": \n {","\n","            \"source\": \n \"var\",","\n","            \"params\": \n {","\n","                \"sym\": \n \"examples.n1\"","\n","            }","\n","        },","\n","        \"n2\": \n {","\n","            \"source\": \n \"var\",","\n","            \"params\": \n {","\n","                \"sym\": \n \"examples.n2\"","\n","            }","\n","        },","\n","        \"sum\": \n {","\n","            \"source\": \n \"formula\",","\n","            \"params\": \n {","\n","                \"formula\": \n \"SUM(n1, n2)\"","\n","            }","\n","        }","\n","    },","\n","    \"bindings\": \n {","\n","        \"text\": \n {","\n","            \"value\": \n {","\n","                \"source\": \n \"dataref\",","\n","                \"params\": \n {","\n","                    \"ref\": \n \"sum\"","\n","                }","\n","            }","\n","        }","\n","    }","\n","}","\n"," ","\n","Formeln können \n verschachteln sein (like in Excel), z. B.","\n","I","F(SUM(n1, \n n2) > 12, 'More than twelve!', 'Too less...')","\n"," ","\n","Auf Eigenschaften eines Datenobjekts mit einem Objekt \n als Wert kann zugegriffen werden, indem die Eigenschaften in der Formel \n spezifiziert werden, z. B. ","nodestate.text","\n"," ","\n","TIPP:","\n","Eine hexadezimale Notation von Werten ist, \n im Vergleich zu Dezimalzahlen, einfacher zu lesen, vor allem wenn man \n mit Bitmasken etc. arbeitet. Hexadezimale Werte brauchen das Präfix 0x, \n z. B. könnte die Bitmaske 1111 0000 0001 0010 als 0xF012 geschrieben werden, \n was leichter zu lesen ist als das Pendant in Dezimalform 61458:","\n","\n","W","enn \n man dies verwendet, könnte eine Formel zur Maskierung eines Datenobjekts \n wie folgt aussehen: ","BITAND(val, \n 0xF012",".","\n"," ","\n"],["\n","Es werden noch einige weitere Funktionen als die integrierten, die Sie \n auf der formula.js-Webseite zu finden sind, unterstützt.","https://formulajs.info/functions/","\n","Die ersten (Stand: Juni 2022) sind:","\n","\n\t","ISBITSET","\n\t","BITMAP","\n","\n"," ","\n","Mit diesen Funktionen ist es möglich, mit einem kompakten Ausdruck zu \n prüfen, ob bestimmte Bits in einer Variablen gesetzt sind.","\n","\n","ISBITSET"," \n und ","BITMAP"," \n funktionieren nur mit 0 bis 31 Bits (nur für 32-Bit-Werte).","\n"," ","\n","\n\t","\n\t","\n\t","\n\t\t","ISBITSET(value, \n\t\t bit, trueVal, falseVal)","\n\t\t"," ","\n\t\t","\n\t\t\t","value"," - \n\t\t\t value to test","\n\t\t\t","bit"," - \n\t\t\t bit to test(starting from 0)","\n\t\t\t","trueVal"," - \n\t\t\t value returned if specified bit is set (optional, default \n\t\t\t = true)","\n\t\t\t","falseVal"," - \n\t\t\t value returned if specified bit is not set (optional, default \n\t\t\t = false)","\n\t\t","\n\t\t","BITMAP(value, \n\t\t defaultResult, bit, value, bit, value ...)","\n\t\t"," ","\n\t\t","\n\t\t\t","value"," - \n\t\t\t value to test","\n\t\t\t","defaultResult"," - \n\t\t\t value returned if non of specified bit is set","\n\t\t\t","bit",", ","value"," - \n\t\t\t one or more pairs: ","\n\t\t\t","\n\t\t\t\t","bit"," - \n\t\t\t\t bit to test","\n\t\t\t\t","value"," - \n\t\t\t\t value returned if corresponding bit is set","\n\t\t\t","\n\t\t","\n\t","\n\t","\n\t\t","Beispiel","\n\t\t"," ","\n\t\t","{","\n\t\t","    \"datasources\": \n\t\t {","\n\t\t","        \"value\": \n\t\t {","\n\t\t","            \"source\": \n\t\t \"localvar\",","\n\t\t","            \"params\": \n\t\t {","\n\t\t","                \"sym\": \n\t\t \"xxx\"","\n\t\t","            }","\n\t\t","        },","\n\t\t","        \"bit\": \n\t\t {","\n\t\t","            \"source\": \n\t\t \"formula\",","\n\t\t","            \"params\": \n\t\t {","\n\t\t","                \"formula\": \n\t\t \"ISBITSET(value,0)\"","\n\t\t","            }","\n\t\t","        }","\n\t\t","    },","\n\t\t","    \"bindings\": \n\t\t {","\n\t\t","        \"text\": \n\t\t {","\n\t\t","            \"value\": \n\t\t {","\n\t\t","                \"source\": \n\t\t \"dataref\",","\n\t\t","                \"params\": \n\t\t {","\n\t\t","                    \"ref\": \n\t\t \"bit\"","\n\t\t","                },","\n\t\t","                \"defaultValue\": \n\t\t \"---\"","\n\t\t","            }","\n\t\t","        }","\n\t\t","    }","\n\t\t","}","\n\t\t"," ","\n\t\t"," ","\n\t\t"," ","\n\t\t"," ","\n\t\t"," ","\n\t\t"," ","\n\t\t"," ","\n\t\t"," ","\n\t\t"," ","\n\t\t"," ","\n\t\t","Beispiel","\n\t\t"," ","\n\t\t","{","\n\t\t","    \"datasources\": \n\t\t {","\n\t\t","        \"value\": \n\t\t {","\n\t\t","            \"source\": \n\t\t \"localvar\",","\n\t\t","            \"params\": \n\t\t {","\n\t\t","                \"sym\": \n\t\t \"xxx\"","\n\t\t","            }","\n\t\t","        },","\n\t\t","        \"bit\": \n\t\t {","\n\t\t","            \"source\": \n\t\t \"formula\",","\n\t\t","            \"params\": \n\t\t {","\n\t\t","                \"formula\": \n\t\t \"BITMAP(value,'#FFFFFF',  1, '#00FF00', 0, '#FF0000', \n\t\t 2, '#0000FF')\"","\n\t\t","            }","\n\t\t","        }","\n\t\t","    },","\n\t\t","    \"bindings\": \n\t\t {","\n\t\t","        \"text\": \n\t\t {","\n\t\t","            \"value\": \n\t\t {","\n\t\t","                \"source\": \n\t\t \"dataref\",","\n\t\t","                \"params\": \n\t\t {","\n\t\t","                    \"ref\": \n\t\t \"bit\"","\n\t\t","                },","\n\t\t","                \"defaultValue\": \n\t\t \"---\"","\n\t\t","            }","\n\t\t","        },","\n\t\t","        \"fillColor\": \n\t\t {","\n\t\t","            \"value\": \n\t\t {","\n\t\t","                \"source\": \n\t\t \"dataref\",","\n\t\t","                \"params\": \n\t\t {","\n\t\t","                    \"ref\": \n\t\t \"bit\"","\n\t\t","                },","\n\t\t","                \"defaultValue\": \n\t\t \"rgb(0,FF,FF)\"","\n\t\t","            }","\n\t\t","        }","\n\t\t","    }","\n\t\t","}","\n\t\t"," ","\n\t\t"," ","\n\t","\n","\n"," ","\n\n\n"]],"2":[["Formeln"]],"5":[["Überblick"],["Bindings mit Formeln"],["Besondere Funktionen"]],"id":"23"})