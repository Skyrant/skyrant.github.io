rh._.exports({"0":[["Attribute zur Erstellung wiederverwendbarer Symbole"]],"1":[["\n"],["\n","Attribute sind ein nützliches Tool, wenn Symbole (einzelne Elemente \n oder Gruppen von Elementen) mit gleichem Aussehen und Verhalten / Bindings \n gebraucht werden, nur für unterschiedliche Daten. Attribute für jede Instanz \n solcher Elemente / Gruppen können einzeln festgelegt werden und können \n Attribut-Platzhalter in Binding-Ausdrücken während der Laufzeit ersetzen. \n Die Grundidee ist, dieses Symbol mehrmals in einer oder mehreren Zeichnungen \n zu verwenden – die einzelnen Instanzen sollten nicht verändert werden, \n z. B. Festlegen eines individuellen Textes oder Ändern von Bindings um \n spezifische Datenobjekte / -variablen zu adressieren. Stattdessen sollten \n individuelle Einstellungen einfach über Symbolattribute parametriert werden.","\n","Das Speichern solch wiederverwendbarer Symbole zeigt den wichtigsten \n Vorteil: Die Möglichkeit, das Bibliothekssymbol später zu ändern (z. B. \n Bindings erweitern, zusätzliche Elemente / Details zu einer Gruppe hinzufügen) \n und diese Änderungen auf alle bereits in einer Zeichnung existierenden \n Symbolinstanzen anzuwenden, ohne die individuellen Attributwerte zu verlieren.","\n","Um das Konzept der Attributverwendung zu verdeutlichen, wird im Folgenden \n ein einfaches Symbol für einen Puffer erstellt. Dieses Symbol sollte eine \n individuelle Legato Variable adressieren, die das aktuelle Fülllevel enthält. \n Für jede Symbolinstanz sollte individuell ein Titel für das Element sowie \n die maximale Kapazität festgelegt werden.","\n","Das Symbol sollte nur ein Textfeld mit einem individuellen Titel und \n einem Fortschrittsbalken, der das aktuelle Fülllevel in Prozentzahlen \n anzeigt, enthalten:","\n","\n","D","er \n Titel und der Fortschrittsbalken werden gruppiert um später als ein Symbol \n verwendet zu werden.","\n"],["\n","Attribute \n müssen zuerst für das gewünschte Element definiert werden – in unserem \n Beispiel, die ganze Gruppe. Wenn Attribute für eine Gruppe erklärt und \n festgelegt werden, können alle Elemente innerhalb dieser Gruppe diese \n Attribute verwenden. Auf den Dialog zur Bearbeitung von Attributdefinitionen \n kann über das Kontextmenü des Elements ","Sapient Attributdefinitionen \n bearbeiten"," zugegriffen werden. Attribute werden in JSON-Format definiert. \n Auf jedes Attribut wird über eine Kennung zugegriffen (der Objektname \n für jedes Attribut befindet sich in der Definition). Für jedes Attribut \n muss ein Anzeigename und ein Datentyp spezifiziert werden. Snippets stellen \n einen guten Startpunkt dar (STRG + rechter Mausklick) – vor allem das \n Snippet ","Beispiele / Längeres Beispiel"," ist ein mittelkomplexes, \n das eine typische Konfiguration anzeigt, die einige verschiedene Datentypen \n enthält:","\n","\n","D","as Beispiel kann als anpassbare Vorlage verwendet \n werden. In diesem Fall stimmen der Titel und die Pufferkapazität, also \n wird das conSym Attribut nur umbenannt, um eine Spezifizierung des Symbols \n der Pufferlevel-Variable für jede Symbolinstanz zu ermöglichen:","\n","{","\n","        "," \"title\": {","\n","                "," \"name\": \"Title\",","\n","                "," \"type\": \"string\"","\n","        "," },","\n","        "," \"varSym\": {","\n","                "," \"name\": \"Buffer \n (variable symbol)\",","\n","                "," \"type\": \"string\"","\n","        "," },","\n","        "," \"bufferCap\": {","\n","                "," \"name\": \"Buffer \n capacity\",","\n","                "," \"type\": \"int\"","\n","        "," }","\n","}","\n"," ","\n"," ","\n","Attribut Datentypen:","\n","\n\t","string",": \n\t Ermöglicht die Eingabe jedes Strings als Attributwert.","\n\t","int",": \n\t Ermöglicht die Eingabe eines integren Werts – zeigt eine numerisches \n\t Eingabefeld im Attributdialog an.","\n\t","bool",": \n\t Ermöglicht die Eingabe eines booleschen Wertes – zeigt eine Checkbox \n\t im Attributdialog an.","\n","\n"," ","\n","\n","Wichtig: Attributnamen müssen valide Kennungen \n ohne Punkte oder Sonderzeichen wie deutsche Umlaute etc. sein.","\n"," ","\n"],["\n","Der Attribute \n bearbeiten Menüpunkt im Kontextmenü des Symbols ermöglicht die Eingabe \n spezifischer Werte für jedes Attribut, z. B.","\n","\n","W","enn Sie das Symbol mehrere Male in einer \n Zeichnung verwenden, erhält jede Instanz ihre eigenen Attributwerte.","\n"," ","\n","\n","Wichtig",": \n Nachdem ein Symbol erstellt wurde, ist es empfehlenswert, es in die Bibliothek \n aufzunehmen und Symbolinstanzen aus der Bibliothek heraus zu erstellen \n anstatt einfach das Originalsymbol zu duplizieren. Das ermöglicht ein \n späteres Aktualisieren einzelner Symbolinstanzen.","\n"," ","\n"],["\n","Attribute können als Platzhalter verwendet werden, entweder in einem \n Elementtext oder in Binding-Ausdrücken.","\n","\n\t","Platzhalter im Text: Durch das Freischalten von Platzhaltern \n\t für Elemente im Binding-Dialog kann der Anzeigetext von Elementen \n\t ein Attribut referenzieren, z. B. für das Titelelement des Symbols.","\n\t","\n","\n","Indem das Attributsymbol innerhalb “%” im Elementtext platziert wird \n …","\n","\n","… wird der Platzhalter durch den Wert des Attributes ersetzt:","\n","\n","Dies kann mit statischen Texten kombiniert werden – es ist sogar möglich, \n unterschiedliche Attributwerte zu kombinieren, z. B.","\n","\n","… wird zu","\n","\n","\n\t","Es ist möglich, %attributename% als Platzhalter für alle String-Werte \n\t in einem Binding-Ausdruck einzufügen. Im obigen Beispiel kann das \n\t Symbol für die Puffervariable in einem Binding-Ausdruck durch den \n\t Namen ersetzt werden, der über das jeweilige Attribut übergeht – in \n\t diesem Fall, um die Position des Balkens auszurechnen:","\n","\n","\n","\n\t","Ein Attributdatenobjekt \n\t kann wie jedes andere Datenobjekt verwendet werden – es kann entweder \n\t in einem Datenquellenabschnitt angegeben werden oder wo immer ein \n\t Wert verwendet wird (ähnlich zu einer Datenreferenz).","\n\t","Das folgende Binding zeigt beide Techniken – ein Attribut als \n\t Platzhalter und Referenzierens eines Attributs über ein Attributdatenobjekt.","\n","\n","{","\n","    \"datasources\": \n {","\n","        \"bufferVar\": \n {","\n","            \"source\": \n \"var\",","\n","            \"params\": \n {","\n","                \"sym\": \n \"%varSym%\"","\n","            }","\n","        },","\n","        \"maxCap\": \n {","\n","            \"source\": \n \"attribute\",","\n","            \"params\": \n {","\n","                \"sym\": \n \"bufferCap\"","\n","            }","\n","        }","\n","    },","\n","    \"bindings\": \n {","\n","        \"barPos\": \n {","\n","            \"value\": \n {","\n","                \"source\": \n \"formula\",","\n","                \"params\": \n {","\n","                    \"formula\": \n \"bufferVar / maxCap * 100\"","\n","                }","\n","            }","\n","        }","\n","    }","\n","}","\n"," ","\n"," ","\n","Das Ergebnis während der Laufzeit:","\n","\n"],["\n","Indem Symbole mit Attributen in eine \n Zeichnung außerhalb der Bibliothek hinzugefügt werden, wird der Attributwertedialog \n automatisch für jede neue Symbolinstanz angezeigt, sodass die individuellen \n Symbolattribute direkt eingegeben werden können.","\n","Nachdem ein Bibliotheksymbol später \n geändert wurde und alle Symbolinstanzen innerhalb einer Zeichnung aktualisiert \n wurden, werden die Symbole aktualisiert, während die individuellen Attributwerte \n wie Position oder Größe der Symbole in der Zeichnung beibehalten werden.","\n\n\n"]],"2":[["Attribute zur Erstellung wiederverwendbarer Symbole"]],"5":[["Definition eines Attributes"],["Attributwerte festlegen"],["Referenzattribute \n im Elementtext oder in Bindings"],["Symbole \n aus der Bibliothek zu einer Zeichnung hinzufügen"]],"id":"29"})