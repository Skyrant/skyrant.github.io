rh._.exports({"0":[["Funktionen zur Behandlung von JSON Objekten"]],"1":[["\n"],["\n","Mit diesen Funktionen können JSON Objektbäume ausgewertet \n werden.","\n","Für die Funktionen kann in einem Script eine Variable \n vom Typ JSON deklariert werden. Alle weiteren Funktionen werden dann mit \n dem Namen der Variablen, einem Punkt und dem Namen der Funktion gemeinsam \n angesprochen. ","\n"],["\n","\n","Deklaration: json.init(string source)","\n","Der JSON Objektbaum wird angelegt und mit den Daten \n aus ","source"," aufgebaut.","\n","Beispiel",":","\n","file     f","\n","string   src","\n","json     js","\n","f.open('c:\\\\temp\\\\list.txt', 4)","\n","src := f.readln","\n","f.close","\n","   ","\n","js.init(src)","\n"," ","\n"],["\n","\n","Deklaration: bool json.csv(&string csv)","\n","Der JSON Objektbaum wird in einen String im CSV-Format \n konvertiert (soweit möglich). Diese Funktion ermöglicht es, alte Scripte \n zur Auswertung zu verwenden.","\n","Beispiel",":","\n","json js","\n","string csv","\n","bool ok","\n","js.init(@Value)","\n","ok := js.csv(&csv) ","\n"," ","\n"],["\n","\n","Deklaration: int json.type","\n","Liefert den Typ des übergebenen JSON Objektes. Der \n Typ wird als Zahl geliefert und ist wie folgt zu interpretieren:","\n","1 Boolean","\n","2 Ganzzahl","\n","3 Fließkomma","\n","4 String","\n","9 JSON Objekt","\n","10 JSON Array","\n","Beispiel",":","\n","json \n js","\n","int"," ","typ","\n","   ","\n","js.init(@Value)","\n","typ \n := js.type","\n"," ","\n"],["\n","\n","Deklaration: string json.name","\n","Liefert den Namen des übergebenen JSON Objektes.","\n","Beispiel",":","\n","json \n js","\n","string \n name","\n","   ","\n","js.init(@Value)","\n","name \n := js.name","\n"," ","\n"],["\n","\n","Deklaration: bool json.bool","\n","Liefert den Wert des übergebenen JSON Objektes als \n Boolean.","\n","Beispiel",":","\n","json js","\n","int typ","\n","bool bit","\n","int zahl","\n","double nummer","\n","string ascii","\n","js.init(@Value)","\n","typ := js.type // Typ abfragen","\n","if typ < 9 then // Typ kleiner 9 ist Grundtyp","\n","  switch typ","\n","    case 1:","\n","      bit := js.bool","\n","      break    ","\n","    case 2:","\n","      zahl := js.int","\n","      break","\n","    case 3:","\n","      nummer := js.double","\n","      break","\n","    case 4:","\n","      ascii := js.string","\n","      break ","\n","  end","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: int json.int","\n","Liefert den Wert des übergebenen JSON Objektes als \n Ganzzahl.","\n","Beispiel",":","\n","json js","\n","int typ","\n","bool bit","\n","int zahl","\n","double nummer","\n","string ascii","\n","js.init(@Value)","\n","typ := js.type // Typ abfragen","\n","if typ < 9 then // Typ kleiner 9 ist Grundtyp","\n","  switch typ","\n","    case 1:","\n","      bit := js.bool","\n","      break    ","\n","    case 2:","\n","      zahl := js.int","\n","      break","\n","    case 3:","\n","      nummer := js.double","\n","      break","\n","    case 4:","\n","      ascii := js.string","\n","      break ","\n","  end","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: double json.double","\n","Liefert den Wert des übergebenen JSON Objektes als \n Fließkommazahl.","\n","Beispiel",":","\n","json js","\n","int typ","\n","bool bit","\n","int zahl","\n","double nummer","\n","string ascii","\n","js.init(@Value)","\n","typ := js.type // Typ abfragen","\n","if typ < 9 then // Typ kleiner 9 ist Grundtyp","\n","  switch typ","\n","    case 1:","\n","      bit := js.bool","\n","      break    ","\n","    case 2:","\n","      zahl := js.int","\n","      break","\n","    case 3:","\n","      nummer := js.double","\n","      break","\n","    case 4:","\n","      ascii := js.string","\n","      break ","\n","  end","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: string json.string","\n","Liefert den Wert des übergebenen JSON Objektes als \n Zeichenfolge.","\n","Beispiel",":","\n","json js","\n","int typ","\n","bool bit","\n","int zahl","\n","double nummer","\n","string ascii","\n","js.init(@Value)","\n","typ := js.type // Typ abfragen","\n","if typ < 9 then // Typ kleiner 9 ist Grundtyp","\n","  switch typ","\n","    case 1:","\n","      bit := js.bool","\n","      break    ","\n","    case 2:","\n","      zahl := js.int","\n","      break","\n","    case 3:","\n","      nummer := js.double","\n","      break","\n","    case 4:","\n","      ascii := js.string","\n","      break ","\n","  end","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: bool json.next(json obj)","\n","Liefert das nächste JSON Objekt. Ist kein Nachfolger \n vorhanden, wird ","false"," zurückgegeben.","\n","Beispiel",":","\n","json js, js1","\n","bool ok","\n","js.init(@Value)","\n","ok := js.next(js1)","\n"," ","\n"],["\n","\n","Deklaration: bool json.ptr(json obj)","\n","Liefert das erste JSON Objekt innerhalb eines verschachtelten \n Objektes oder Arrays. Ist kein Objekt vorhanden, wird ","false"," \n zurückgegeben.","\n","Beispiel",":","\n","json js, js1","\n","bool ok","\n","js.init(@Value)","\n","if js.type = 9 then","\n","  ok := js.ptr(js1)","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: bool json.find(string name, json obj)","\n","Sucht nach dem Objekt mit dem angegebenen Namen ","name"," und erzeugt das neue Objekt \n ","obj",". Ist kein Objekt vorhanden, \n wird ","false"," zurückgegeben. Diese \n Funktion kann nur auf das Root-Objekt angewendet werden!","\n","Beispiel",":","\n","json js, js1","\n","if not js.find('root.jsonrpc', js1) then","\n","  debug('Datei hat nicht JsonRpc Format!')","\n","  return ","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: bool json.findex(string name, int typ, \n json obj)","\n","Sucht nach dem Objekt mit dem angegebenen Namen ","name"," und und dem vorgegebenen Typ \n ","typ"," und erzeugt das neue Objekt \n ","obj",". Ist kein Objekt vorhanden, \n wird ","false"," zurückgegeben. Diese \n Funktion kann nur auf das Root-Objekt angewendet werden!","\n","Beispiel",":","\n","json js, js1","\n","if not js.findex('root.jsonrpc', string, js1) then","\n","  debug('Datei hat nicht JsonRpc Format!')","\n","  return ","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: bool json.valid","\n","Prüft, ob die übergebene Variable ein gültiges JSON \n Objekt ist.","\n","Beispiel",":","\n","json  js, js1","\n","bool ok","\n","ok := js.next(&js1)","\n","ok := js1.valid","\n"," ","\n"],["\n","\n","Deklaration: int json.size","\n","Gibt die Größe des JSON Objekts zurück. Diese Funktion \n liefert nur bei Arrays einen gültigen Wert!","\n","Beispiel",":","\n","json  js, js1","\n","int    size","\n","bool ok","\n","ok := js.next(&js1)","\n","if ok and js1.type = 10 then","\n","  size := js1.size","\n","endif","\n"," ","\n\n\n"]],"2":[["Funktionen zur Behandlung von JSON Objekten"]],"4":[["Init"],["Csv"],["Type"],["Name"],["Bool"],["Int"],["Double"],["String"],["Next"],["Ptr"],["Find"],["FindEx"],["Valid"],["Size"]],"id":"63"})