rh._.exports({"0":[["Allgemeine Funktionen"]],"1":[["\n"],["\n"],["\n","\n","Deklaration: string AnsiToOem(string text)","\n","Liest den String ","text,"," führt eine Typkonvertierung \n der einzelnen Zeichen aus und liefert einen String mit Zeichen entsprechend \n den OEM-Konventionen.","\n","Beispiel",":","\n","string TEXT","\n","TEXT := AnsiToOem('Very similar')","\n"," ","\n"],["\n","\n","Deklaration: string AnsiToUtf8(string text)","\n","Liest den String ","text",", führt \n eine Typkonvertierung der einzelnen Zeichen aus und liefert einen String \n mit Zeichen entsprechend der UTF8-Konventionen.","\n","Beispiel:","\n","string text_utf8","\n","text_utf8  :=  AnsiToUtf8 ('Schlüsselwort')","\n"," ","\n"],["\n","\n","Deklaration: string ConvStr(string text, string fromcode, string tocode)","\n","Liest den String ","text",", interpretiert \n ihn nach den fromcode-Konventionen, führt eine Typkonvertierung der einzelnen \n Zeichen aus und liefert einen String mit Zeichen entsprechend der ","tocode","-Konventionen.","\n","Beispiel:","\n","string text_source","\n","string text_dest","\n","text_source := @value","\n","text_dest := ConvStr(text_source, 'MS-ANSI', 'UTF8')","\n"," ","\n"],["\n","\n","Deklaration: Eval(string commandline)","\n","Führt ein Skript, welches als String ","commandline"," \n übergeben wird, aus. Strings innerhalb von ","commandline"," \n müssen mit \\' angeführt werden.","\n","Beispiel",":","\n","eval('ScriptShow(\\'Hello world\\')')","\n"," ","\n"],["\n","\n","Deklaration: exec(string command)","\n","Startet eine andere Applikation. Der Dateiname, sowie \n optionale Parameter werden im String ","command"," übergeben.","\n","Beispiel",":","\n","exec('notepad.exe info.txt')","\n"," ","\n"],["\n","\n","Deklaration: string OemToAnsi(string text)","\n","Liest den String ","text",", führt eine Typkonvertierung \n der einzelnen Zeichen aus und liefert einen String mit Zeichen entsprechend \n den ANSI-Konventionen.","\n","Beispiel",":","\n","string TEXT","\n","TEXT := OemToAnsi('Very similar')","\n"," ","\n"],["\n","\n","Deklaration: bool Ping(string host)","\n","Versucht maximal 4 Mal, den durch ","host"," spezifizierten \n Teilnehmer zu erreichen.","\n","Die Funktion liefert \"true\", wenn der Teilnehmer \n erreicht werden konnte.","\n","Beispiel",":","\n","bool ok","\n","ok := ping('127.0.0.1')","\n"," ","\n"],["\n","\n","Deklaration: bool PingEx(string host, long retry, \n long timeout, long wait)","\n","Versucht Anzahl ","retry"," Mal, den durch ","host"," \n spezifizierten Teilnehmer zu erreichen. Es wird Dauer ","timeout"," gewartet, \n ehe ein Timeout zurückgemeldet wird. Zwischen den Versuchen wird Dauer \n ","wait"," gewartet, bevor ein neuer Versuch gestartet wird.","\n","Zulässiger Bereich für ","retry",": 1..10","\n","Zulässiger Bereich für ","timeout",": 500..10000 ms","\n","Zulässiger Bereich für ","wait",": 100..2000 ms","\n","Die Funktion liefert nur \"true\", wenn alle \n Versuche erfolgreich waren.","\n","Beispiel",":","\n","bool ok","\n","ok := pingEx('127.0.0.1', 4, 1000, 200)","\n"," ","\n"],["\n","\n","Deklaration: long random","\n","Liefert einen Zufallswert im Bereich von 0 bis 32767.","\n","Beispiel",":","\n","debug(LToStr(random, 10))","\n"," ","\n"],["\n","\n","Deklaration: return [value]","\n","Beendet das Script. Ist das Script mit einem Typ (ungleich \n <NIL>) erstellt, muss ein Rückgabewert ","value"," angegeben werden, \n der dem Typ des Scripts entspricht. Wird ","Return"," in einer bedingten \n Anweisungsfolge aufgerufen, muss trotzdem im absoluten Anweisungsteil \n ein ","Return"," stehen.","\n","Beispiel",":","\n","if \"Value.Bool\" then","\n","  OPC.GOPS.PLC1.MW100 := 10","\n","  return 1","\n","else","\n","  OPC.GOPS.PLC1.MW100 := 20","\n","  return 0","\n","endif","\n","return 0              // \n immer erforderlich !","\n"," ","\n"],["\n","\n","Deklaration: bool ServiceStart(string servicename)","\n","Der Dienst mit dem Namen ","servicename"," \n wird gestartet. Ist der Dienst vorhanden, liefert die Funktion true.","\n","B","eispiel",":","\n","bool ok","\n","ok:= servicestart('smc_agl')","\n"," ","\n"],["\n","\n","Deklaration: long System(string cmd)","\n","Führt das Kommando ","cmd"," aus und gibt den Returnwert \n in ","rv"," zurück.","\n","Beispiel",":","\n","long rv","\n","rv := System('mkdir –p /tmp/test')","\n"," ","\n"],["\n","\n","Deklaration: string Utf8ToAnsi(string text)","\n","Liest den String ","text",", führt \n eine Typkonvertierung der einzelnen Zeichen aus und liefert einen String \n mit Zeichen entsprechend der ANSI-Konventionen.","\n","Beispiel:","\n","string text_ansi","\n","string text_utf8","\n","text_utf8 := @value","\n","text_ansi := Utf8ToAnsi(text_utf8)","\n"," ","\n"],["\n","\n","Deklaration: string @Scriptname","\n","Liefert den einfachen Namen des Skripts.","\n","B","eispiel",":","\n","string s","\n","s:= @scriptname","\ndebug('my name is '+s)","\n"," ","\n"],["\n","\n","Deklaration: string @Scriptfullname","\n","Liefert den vollen Namen des Skripts.","\n","B","eispiel",":","\n","string s","\n","s:= @scriptfullname","\ndebug('my extended name is '+s)","\n"," ","\n\n\n"]],"2":[["Allgemeine Funktionen"]],"4":[["AnsiToOem"],["AnsiToUtf8"],["ConvStr"],["Eval"],["Exec"],["OemToAnsi"],["Ping"],["PingEx"],["Random"],["Return"],["ServiceStart"],["System"],["Utf8ToAnsi"],["@Scriptname"],["@Scriptfullname"]],"id":"37"})