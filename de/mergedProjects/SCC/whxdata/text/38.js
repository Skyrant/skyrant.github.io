rh._.exports({"0":[["Variablen"]],"1":[["\n"],["\n","\"Variablennamen\" können aus Ziffern und Buchstaben \n in beliebiger Reihenfolge bestehen. Groß- und Kleinschreibung wird nicht \n unterschieden. Die Länge des Namens ist nicht vorgeschrieben.","\n",":","\n","Für den Namen gibt es keine Namenskonvention, \n es ist beispielsweise auch möglich, einen Namen mit Leerzeichen, Plus \n (+) oder Minus (-) zu vergeben. Allerdings werden diese Zeichen bei der \n Verwendung in einem Script nicht richtig erkannt, da der Scanner eine \n Trennung bei diesen Zeichen durchführt. Es sollte also im Namen auf diese \n Zeichen verzichtet werden. Alternativ kann die Variable im Script in doppelte \n Hochkommata gestellt werden, z.B. \"Value.Ich bin eine Variable\".","\n","Die Definition erfolgt durch Angabe des \"Typs\" \n gefolgt von dem \"Variablennamen\". Es können auch mehrere Variablen \n des gleichen Typs hintereinander definiert werden. Dabei müssen die einzelnen \n Namen durch Komma getrennt werden.","\n","Beispiel",":","\n","string   name, path","\n","long     count","\n"," ","\n"],["\n","\"Variablen\" können auch als ","Array"," \n definiert werden. Dabei wird dem Namen die Arraygröße durch eckige Klammern \n eingegrenzt nachgestellt. Array beginnt bei der Adressierung mit 0, d.h., \n Array[0] ist das erste Feld. Beispielsweise zählt \"szTexts[10]\" \n von 0-9.","\n","Beispiel",":","\n","long     numarr[16]","\n"," ","\n"],["\n","Variablen können auch als Struct definiert werden. \n Dabei wird zuerst das Schlüsselwort ","struct",", gefolgt von dem Namen \n der Struktur angegeben. Die einzelnen Mitglieder der Struktur werden durch \n ","begin"," und ","end"," eingegrenzt. Ein Array aus Strukturen kann \n nicht definiert werden.","\n","Beispiel",":","\n","struct   textline","\n","begin","\n","  long nr","\n","  char data[256]","\n","end","\n"," ","\n"],["\n","Script-Variablen behalten ihren Wert nur während eines \n Durchlaufes. Beim nächsten Aufruf des Scripts werden die Variablen zunächst \n wieder auf Nullwerte gesetzt. Sollen Werte den ganzen Projektablauf über \n erhalten werden, so muss der Typangabe bei der Variablendeklaration das \n Schlüsselwort ","static"," vorangestellt werden. \"Static\"-Variablen \n werden nur bei Projektbeginn auf Nullwerte initialisiert:","\n","Beispiel",":","\n","static long l1 // behält ihren Wert","\n","long   l2      /* \n wird bei jedem","\n","                  Durchlauf \n auf Null","\n","                  gesetzt","\n","               */","\n"," ","\n"],["\n","Ein Block ","block"," besteht aus einer beliebigen \n Aneinanderreihung von numerischen Werten, Strings und Bool-Werten. Die \n maximale Länge eines solchen Blockes ist 65.496 Byte.","\n"],["\n","Der Typ ","bool"," kann zwei Zustände annehmen. Alle \n Werte ungleich null sind true, der Wert null false. Zur Eingabe von booleschen \n Konstanten sind die Worte \"true\" und \"false\" reserviert.","\n",":","\n","Bei Abfragen von booleschen Werten z.B. mit \n IF...THEN...ENDIF dürfen keine Vergleichsoperatoren (=, >, <,…) \n angegeben werden. Die Abfrage erfolgt direkt auf die Variable (z.B. IF \n BOOL1 THEN..., Abfrage auf true) oder mit dem Operator NOT (z.B. IF NOT \n BOOL1 THEN..., Abfrage auf false).","\n"],["\n","1-Byte Zahl ohne Vorzeichen.","\n"],["\n","1-Byte Zahl mit Vorzeichen.","\n"],["\n","Gleitkommazahlen werden durch den Typ ","double"," \n festgelegt. Es handelt sich hierbei um eine 8-Byte IEEE Gleitkommazahl \n mit 15-stelliger Genauigkeit.","\n","Wertebereich   1.7 * 10 ","-308"," \n bis 1.7 * 10 ","+308","\n","Die Gleitkommazahlen können in Dezimal- oder Exponentialschreibweise \n angegeben werden. Der Exponent wird durch ","e"," oder ","E"," eingeleitet. \n Die Zahl darf keine Leerzeichen enthalten.","\n","Beispiel",":","\n","1.234, .015, -1.345E+3","\n"," ","\n"],["\n","4-Byte Zahl ohne Vorzeichen.","\n"],["\n","Elementvariablen werden im Script im Klartext angegeben \n und müssen durch doppelte Hochkommata eingegrenzt werden, wenn der Variablenname \n Leerzeichen oder Sonderzeichen enthält. Der Variablenname wird in voller \n Länge angegeben:","\n","Beispiel",":","\n","Value.Temp1        // \n Variable \"Temp1\" aus der Gruppe \"Value\"","\n","\"Value.act temp 2\" // Variable \"act \n temp 2\" aus der Gruppe \"Value\"","\n"," ","\n"],["\n","4-Byte Zahl mit Vorzeichen.","\n"],["\n","4-Byte Zahl mit Vorzeichen. Dieser Typ wird von den \n Variablen intern als Standard-Integerwert verwendet.","\n","Wertebereich   -2.147.483.648 bis 2.147.483.647.","\n","Alle Integer-Zahlenangaben können auch hexadezimal \n (vorangestelltes ","0x",")  oder oktal (vorangestellte ","0"," \n (Null))  angegeben werden.","\n","Beispiel",":","\n","long   i","\n","i := 0x1A // hexadezimal","\n","i := 035  // oktal","\n"," ","\n"],["\n","2-Byte Zahl mit Vorzeichen.","\n"],["\n","Ein ","String"," ist eine Folge von null oder mehr \n ASCII-Zeichen. Der String kann eine Länge bis zu 65.498 Zeichen haben \n und wird durch ein Nullzeichen abgeschlossen. Wird ein konstanter String \n eingegeben, ist er durch einfache Hochkommata einzugrenzen.","\n","Beispiel",":","\n","string s","\n","s := 'I am a string'","\n"," ","\n","Soll ein String Zeichen enthalten, die nicht darstellbar \n sind (z.B. Zeilenvorschub), können Escape-Sequenzen eingegeben werden. \n Die Escape-Sequenzen beginnen mit einem Backslash (","\\",").","\n","Ein Backslash in Kombination mit oktalen oder hexadezimalen \n Zahlen repräsentiert den ASCII oder Steuercode, der diesem Wert entspricht. \n Ein Carriage Return (Wagenrücklauf) kann z.B. durch '\\x0D' dargestellt \n werden. Soll in dem String ein Backslash verwendet werden, muss dieser \n verdoppelt werden (","\\\\","). Dies ist z.B. bei Angabe von Verzeichnispfaden \n erforderlich. Die folgende Tabelle enthält alle erlaubten Escape-Sequenzen:","\n"," ","\n","\n\t","\n\t\t","Sequenz","\n\t\t","Wert","\n\t\t","Zeichen","\n\t\t","Bedeutung","\n\t","\n\t","\n\t\t","\\a","\n\t\t","0x07","\n\t\t","BEL","\n\t\t","Alarmton","\n\t","\n\t","\n\t\t","\\b","\n\t\t","0x08","\n\t\t","BS","\n\t\t","Backspace","\n\t","\n\t","\n\t\t","\\f","\n\t\t","0x0C","\n\t\t","FF","\n\t\t","Seitenvorschub","\n\t","\n\t","\n\t\t","\\n","\n\t\t","0x0A","\n\t\t","LF","\n\t\t","Zeilenvorschub","\n\t","\n\t","\n\t\t","\\r","\n\t\t","0x0D","\n\t\t","CR","\n\t\t","Carriage \n\t\t Return","\n\t","\n\t","\n\t\t","\\t","\n\t\t","0x09","\n\t\t","HT","\n\t\t","Tabulator \n\t\t horizontal","\n\t","\n\t","\n\t\t","\\v","\n\t\t","0x0B","\n\t\t","VT","\n\t\t","Tabulator \n\t\t vertikal","\n\t","\n\t","\n\t\t","\\\\","\n\t\t","0x5C","\n\t\t","\\","\n\t\t","Backslash","\n\t","\n\t","\n\t\t","\\'","\n\t\t","0x27","\n\t\t","'","\n\t\t","Hochkomma \n\t\t einfach","\n\t","\n\t","\n\t\t","\\\"","\n\t\t","0x22","\n\t\t","\"","\n\t\t","Hochkomma \n\t\t doppelt","\n\t","\n\t","\n\t\t","\\?","\n\t\t","0x3F","\n\t\t","?","\n\t\t","Fragezeichen","\n\t","\n\t","\n\t\t","\\0","\n\t\t"," ","\n\t\t"," ","\n\t\t","Oktalzahl","\n\t","\n\t","\n\t\t","\\x","\n\t\t"," ","\n\t\t"," ","\n\t\t","Hexadezimalzahl","\n\t","\n\t","\n\t\t","\\X","\n\t\t"," ","\n\t\t"," ","\n\t\t","Hexadezimalzahl","\n\t","\n","\n"," ","\n"],["\n","2-Byte Zahl ohne Vorzeichen.","\n\n\n"]],"2":[["Variablen"]],"4":[["Array"],["Struct"],["Static-Variablen"],["Block"],["Bool"],["Byte"],["Char"],["Double"],["DWord"],["Elementvariablen"],["Int"],["Long"],["Short"],["String"],["Word"]],"id":"38"})