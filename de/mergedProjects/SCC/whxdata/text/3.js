rh._.exports({"0":[["Installation"]],"1":[["\n"],["\n"],["\n","Die Installation des Cloud Connectors erfolgt über \n das Installationsprogramm \"setupscc.exe\". Eine detaillierte \n Installationsanleitung finden Sie im separaten Dokument \"Legato_Systeminstallation\".","\n","Wird die Cloud Connector Installation zur Laufzeit \n (online) als Win64 Cloud Connector betrieben, sind ggf. der OPC-Server \n und die zugehörigen Treiber durch das Installationsprogramm Scc_opc.exe\" \n ebenfalls am Cloud Connector PC zu installieren. Das ist nur sinnvoll, \n wenn der Cloud Connector im Ablauf als Windows Cloud Connector verwendet \n wird oder die aktuelle Installation als Projektierungsumgebung verwendet \n werden soll. In diesem Fall empfiehlt es sich, die Installation von Cloud \n Connector und OPC-Server in einem Schritt durchzuführen.","\n","Bei Benutzung der Installation als Editor für \n UNIX Cloud Connector Projekte ist die Installation des Cloud Connector \n selbst ausreichend.","\n"],["\n"],["\n","In einem ersten Schritt muss eine Verbindung vom Editor \n zur Runtime hergestellt werden. Öffnen Sie die Datei \"Scc_Edt.exe\". \n Die Datei muss mit Administrator-Rechten ausgeführt werden. Wählen Sie \n unter \"Datei\" den Eintrag \"Service Administration\" \n aus:","\n","\n","Es öffnet sich folgender Dialog, in dem alle vorhandenen \n Dienste angezeigt werden:","\n","\n","Durch Klick auf \"Ändern\" kann ein bestehender \n Dienst editiert werden, Klick auf \"Löschen\" löscht einen Dienst.","\n","Durch Klick auf \"Hinzufügen\" können neue \n Dienste konfiguriert werden.","\n","\n","Geben Sie einen Namen und eine Beschreibung für den \n Dienst ein. Der Service-Name muss innerhalb der Runtime eindeutig sein.","\n","Unter Typ muss der Typ des Dienstes angegeben werden. \n Es werden alle gefundenen Diensttypen angezeigt. Im Folgenden sind die \n bekanntesten Möglichkeiten beschrieben:","\n","Win64 Service: Standard bei Windows-Rechnern; \n der Cloud Connector wird als Dienst eingerichtet.","\n","Win64 Exe: Testversion bei Windows-Rechnern; der \n Cloud Connector wird normal ausgeführt, mit den angegebenen Parametern. \n Der Cloud Connector muss manuell gestoppt werden.","\n","Unix: Standard bei Unix-Rechnern.","\n","LFZ Win64 Service: Dienst für den Logfilezipper.","\n","SMC AGLink S7 Win64 Service: Maschinenclient zur \n Koppelung mit AGLink.","\n","...","\n"," ","\n","Dann wählen Sie einen Pfad aus, wohin der Dienst seine \n Log-Dateien schreiben soll. Standardmäßig ist hier das Verzeichnis \"Eigene \n Dokumente\" des angemeldeten Benutzers eingetragen. Darunter kann \n durch Klick auf ... ausgewählt werden, welche Ereignisse gelogt werden \n sollen.","\n","\n","Schließlich muss die URI der Runtime eingegeben werden \n (Pfad und Host).","\n","Wenn gewünscht, kann zusätzlich ein Projekt festgelegt \n werden, das beim Start des Editors direkt geladen und gestartet werden \n soll.","\n"],["\n","Auch Sapient Maschinenclients (SMC) können hier als \n Dienste konfiguriert werden. Sie dienen dazu, über Broker (z.B. Mosquitto) \n mit dem SCC zu kommunizieren.","\n","Für SMCs muss zusätzlich noch eine Konfigurationsdatei \n selektiert werden. Durch Klick auf \"Ändern...\" öffnet sich ein \n Dialog zum Ändern der Konfigurationsdatei:","\n","\n","Hier muss zunächst der Name des Clients eingegeben \n werden. Der \"Clientname\" dient der Anmeldung beim Broker. Er \n sollte so gewählt werden, dass er auf Broker-Seite eindeutig ist.","\n","Unter \"URI\" muss der Verbindungsstring zum \n MQTT-Broker eingegeben werden.","\n","Außerdem kann eine Authentifizierung für den Verbindungsaufbau \n definiert werden, falls notwendig oder gewünscht. In diesem Fall müssen \n ein Benutzer und ein Passwort eingegeben werden.","\n","Soll beim Broker eine \"Last Will Nachricht\" \n für den Fall einer Verbindungsunterbrechung hinterlegt werden, muss diese \n im folgenden Menüpunkt aktiviert werden. Es können dann ein Thema für \n die Nachricht, der Inhalt der Nachricht sowie die Qualität der Nachricht \n definiert werden.","\n","Außerdem kann der Namensbereich festgelegt werden, \n in dem der Client mit dem Broker kommuniziert.","\n","Schließlich müssen noch die Treibereinstellungen festgelegt \n werden. Es wird eine .los-Datei als Konfigurationsdatei selektiert und \n das Ausgabeformat des Werts festgelegt (Standardeinstellungen belassen!) \n Simple gibt nur den Wert zurück, Extended gibt den Wert + Buchungsdatum \n zurück (z.B. hilfreich, um Fehler zu finden), Complete gibt den Wert inklusive \n aller Details zurück.","\n"],["\n","Da die Anzahl der gespeicherten Logbücher begrenzt \n ist, ist der einzusehende Zeitraum bei vielen Ereignissen relativ kurz \n (bei großen Konfigurationen im Minutenbereich). Eine eventuell notwendige \n Fehleranalyse ist dann kaum möglich.","\n","Um eine große Menge an Logdaten archivieren zu können, \n gibt es den Logfilezipper. Mit diesem werden die ältesten Logbücher komprimiert \n und in ein eigenes Verzeichnis gespeichert. Die Anzahl der komprimierten \n Logbücher kann parametriert werden.","\n","Unter Unix werden entsprechende Prozesse konfiguriert \n und vor dem Cloud Connector gestartet.","\n","Unter Windows können entsprechende Service Instanzen \n konfiguriert werden.","\n","Der Prozess ist derselbe wie für alle anderen Dienste \n auch (siehe oben).","\n","Im Bereich \"Konfiguration\" muss nun noch \n die Konfigurationsdatei für den Logfilezipper angegeben werden. Ist die \n Datei noch nicht vorhanden, wird sie bei Aufruf des Dialoges automatisch \n angelegt. Im Anschluss müssen durch Klick auf \"Bearbeiten...\" \n weitere Einstellungen vorgenommen werden:","\n","\n","Unter \"Verzeichnis Logdateien\" wird das Verzeichnis \n gewählt, das überwacht werden soll. Dieses Verzeichnis muss bereits vorhanden \n sein!","\n","Unter \"Verzeichnis Zipdateien\" wird das Verzeichnis \n angegeben, in dem die komprimierten Dateien abgelegt werden sollen. Dieses \n Verzeichnis muss noch nicht existieren, es wird dann beim Start angelegt.","\n","In \"Dateiname\" muss der Name der Datei angegeben \n werden, welche bei Änderung komprimiert wird. Diese Datei ist im Regelfall \n die letzte Logdatei (bei Meldungslogs name+\".log.019\", bei Fehlerlogs \n name+\"err.09\").","\n","Die \"Max. Anzahl Zipdateien\" gibt an, wieviele \n Dateien im Zip-Verzeichnis vorgehalten werden.","\n","Schließlich muss noch der Pfad zum Zip-Programm angegeben \n werden. Derzeit kann nur gzip.exe verwendet werden bzw. ein Programm, \n welches die gleichen Aufrufparameter verwendet. gzip.exe wird mit der \n SCC Runtime mit ausgeliefert.","\n"],["\n","Der Dienst ist nun konfiguriert, aber noch nicht installiert. \n Selektieren Sie den Dienst im mittleren Teil des Dialogs und klicken Sie \n dann unten auf \"Installieren\".","\n","\n","Der Dienst wird installiert; der Text unten ändert \n sich von \"Dienst nicht installiert\" zu \"Dienst gestoppt\".","\n"],["\n","Klicken Sie nun auf \"Start\", um den Dienst \n zu starten.","\n","\n","Der Text ändert sich zu \"Dienst läuft\". Er \n kann nun bei Bedarf gestoppt oder pausiert werden. Dies kann auch über \n das Dienste-Menü von Windows erfolgen.","\n","Beenden Sie den Dialog mit \"OK\".","\n"],["\n","Nun muss sich der Editor mit der gewünschten Runtime \n verbinden. Öffnen Sie dazu das Menü \"Datei\" - \"Mit Service \n verbinden ...\"","\n","\n","Unter Service-Name kann nun aus einer Drop-Down-Liste \n der gewünschte Dienst ausgewählt werden (es stehen alle Dienste zur Verfügung, \n die zuvor eingerichtet wurden).","\n","Darunter muss noch die URI des Dienstes eingegeben \n werden (Pfad zur Runtime und Port des Redis).","\n","Der Editor ist nun mit der Runtime verbunden. Nun kann \n ein Projekt geladen und gestartet werden.","\n\n\n"]],"2":[["Überblick"],["Einrichten \n des Cloud Connectors als Dienst"]],"3":[["Installation"]],"4":[["Anlegen \n von Diensten"],["Sapient \n Maschinenclients (SMC)"],["Logfilezipper"],["Dienst installieren"],["Dienst starten"],["Verbinden \n zur Runtime"]],"id":"3"})