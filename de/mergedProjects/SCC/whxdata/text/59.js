rh._.exports({"0":[["Funktionen der Publish/Subscribe-Schnittstelle"]],"1":[["\n"],["\n"],["\n","\n","Deklaration: Subscribe(string topic, int qos)","\n","Abonniert beim Broker Nachrichten zum Thema ","topic",". \n ","qos"," definiert die Qualität des \n Services.","\n","qos:","\n","0 höchstens einmal","\n","1 mindestens einmal","\n","2 genau einmal","\n","Beispiel",":","\n","PubSub.Mosquitto.Subscribe('temp/random',0)","\n"," ","\n"],["\n","\n","Deklaration: Unsubscribe(string topic)","\n","Beendet das Abonnement der Nachrichten zum Thema ","topic",".","\n","Beispiel",":","\n","PubSub.Mosquitto.Unsubscribe('temp/random',0)","\n"," ","\n"],["\n","\n","Deklaration: Publish(string topic, string message, \n int qos)","\n","Sendet eine Nachricht ","message"," \n zum Thema ","topic",". ","qos"," \n definiert die Qualität des Services.","\n","qos:","\n","0 höchstens einmal","\n","1 mindestens einmal","\n","2 genau einmal","\n","Beispiel",":","\n","PubSub.Mosquitto.Publish('temp/random', '12.0',0)","\n"," ","\n"],["\n","\n","Deklaration: PublishEx(string topic, string message, \n int qos, bool dup, bool retain)","\n","Sendet eine Nachricht ","message"," \n zum Thema ","topic",". ","qos"," \n definiert die Qualität des Services.","\n","qos:","\n","0 höchstens einmal","\n","1 mindestens einmal","\n","2 genau einmal","\n","dup"," gibt an, \n ob es sich um eine Wiederholung der Nachricht handelt (","dup"," \n = true). Bei ","qos"," = 0 muss ","dup"," false sein!","\n","retain"," = true \n veranlasst den Server, die Nachricht zu speichern, um den Wert auch zukünftigen \n Clients senden zu können.","\n","Beispiel",":","\n","PubSub.Mosquitto.Publish('temp/random', '12.0',0,false,true)","\n"," ","\n\n\n"]],"2":[["Funktionen der Publish/Subscribe-Schnittstelle"]],"4":[["Subscribe"],["Unsubscribe"],["Publish"],["PublishEx"]],"id":"59"})