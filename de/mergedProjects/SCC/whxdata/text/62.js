rh._.exports({"0":[["Logbuchfunktionen"]],"1":[["\n"],["\n"],["\n","\n","Deklaration: Debug(string text)","\n","Schreibt den String ","text"," in das Logbuch.","\n","Beispiel",":","\n","if OPC.GOPS.PLC1.Pressure > 100 then","\n","  debug('WARNING: Pressure too high!')","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: DebugBlkDump(string text, block b, \n long size)","\n","Schreibt den String ","text"," und einen Hexdump ins \n Logbuch. Der Hexdump wird aus dem Block ","b"," ab Offset 0 mit der Länge \n von ","size"," Bytes ausgegeben.","\n","Beispiel",":","\n","block b","\n","long  l","\n","b := OPC.GOPS.PLC1.Alarmblock","\n","l := BlockSize(b)","\n","DebugBlkDump(LToStr(l,10)+' Byte(s) :', b, l)","\n"," ","\n"],["\n","\n","Deklaration: DebugVarDump(string text, pointer p, \n long size)","\n","Schreibt den String ","text"," und einen Hexdump ins \n Logbuch. Der Hexdump wird aus dem Variablenbereich des Scripts mit der \n Länge von ","size"," Bytes ausgegeben.","\n","Beispiel",":","\n","char  c[128]","\n","MemSet(&c, 33, 128)","\n","DebugVarDump('128 Bytes :', &c, 128)","\n"," ","\n"],["\n","\n","Deklaration: LogConfig(long loghandle, long logmask)","\n","Konfiguriert den durch ","loghandle"," angegebenen \n Logger. ","Logmask"," schaltet das Loggen der Klassen (1 - 32) ein / \n aus.","\n","Beispiele",":","\n","\n\t","Logmask 0xFFFFFFFF schaltet das Loggen \n\t der Klassen 1 –32 ein","\n\t","Logmask 0xFFFF0000 schaltet das Loggen \n\t der Klassen 1 –16 aus und 17 –32 ein","\n\t","Logmask 0x00000000 schaltet das Loggen \n\t der Klassen 1 – 32 aus","\n","\n","Beispiel",":","\n","LogConfig(loghandle, 0xFFFFFFFF)","\n"," ","\n"],["\n","\n","Deklaration: long LogCreate(string logname, string \n dir, long logfiles, long logfilesize, long errfiles, long errfilesize)","\n","Erzeugt im Verzeichnis ","dir"," die Logdatei ","logname",".log \n und die Errordatei ","logname",".err.","\n","Wenn die Größe einer Logdatei ","logfilesize"," überschreitet, \n werden die Logdateien ","logname",".log.n in ","logname",".log.n+1 umbenannt \n (dito für Errordateien beim Überschreiten der Größe von ","errfilesize",").","\n","Wenn bereits ","logfiles"," Logdateien bzw. ","errfiles"," \n Errordateien existieren, wird die älteste Datei gelöscht.","\n","Logmeldungen aller Klassen werden in der Logdatei gespeichert. \n Fehler (Klasse 17 – 32) werden zusätzlich auch in der Errordatei gespeichert, \n sofern das Loggen der Klasse eingeschaltet ist (siehe auch LogConfig).","\n","Beispiel",":","\n","long logHandle","\n","logHandle := LogCreate('logxy',","\n","                       'home/legato/log',","\n","                       20, \n 10 * 1024 * 1024,","\n","                       10,      1024 \n * 1024","\n","                      )","\n"," ","\n"],["\n","\n","Deklaration: LogDump(long logcls, string text, block \n b, long size)","\n","Schreibt den String ","text"," und einen Hexdump mit \n der Logklasse ","logcls"," ins Logbuch. Der Hexdump wird aus dem Block \n b ab Offset 0 mit der Länge von ","size"," Bytes ausgegeben.","\n","Beispiel",":","\n","block b","\n","   ","\n","b := newblock(128)","\n","   ","\n","setblocknum(b, 0, 1, false, 26)","\n","setblockstr(b, 1, 26, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')","\n","   ","\n","LogDump(0x07, 'LogDump: ', b, 30)","\n"," ","\n"],["\n","\n","Deklaration: LogDumpEx(long loghandle, long logcls, \n string text, block b, long size)","\n","Schreibt den String ","text"," und einen Hexdump mit \n der Logklasse ","logcls"," in das durch ","loghandle"," angegebene Logbuch. \n Der Hexdump wird aus dem Block b ab Offset 0 mit der Länge von ","size"," \n Bytes ausgegeben.","\n","Den ","loghandle"," bekommt man, indem man durch den \n Aufruf von ","LogCreate"," ein Logbuch erzeugt.","\n","Beispiel",":","\n","long logHandle","\n","block b","\n","   ","\n","logHandle := LogCreate('logxy',","\n","                       'home/legato/log',","\n","                       20, \n 10 * 1024 * 1024,","\n","                       10,      1024 \n * 1024","\n","                      )","\n","   ","\n","b := newblock(128)","\n","   ","\n","setblocknum(b, 0, 1, false, 26)","\n","setblockstr(b, 1, 26, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')","\n","   ","\n","LogDumpEx(logHandle, 0x40, 'LogDump: ', b, 30)","\n"," ","\n"],["\n","\n","Deklaration: LogPrintf(int klasse, string format, \n ...)","\n","Der Befehl erzeugt einen String aus einem Formatstring \n ","format"," und einer beliebigen Anzahl Parameter und schreibt ihn ins \n Logbuch. Dabei wird nicht, wie bei Debug die Klasse 7, sondern die mit \n ","klasse"," übergebene Klasse verwendet. ","klasse"," ist bitcodiert, \n d.h. für Klasse 7 muss 0x40 übergeben werden. Die Parameter können Strings \n oder numerische Werte sein. Für den Formatstring gelten folgende Angaben:","\n","\n\t","\n\t\t","Formatzeichen","\n\t\t","Interpretation","\n\t","\n\t","\n\t\t","u","\n\t\t","Dezimal \n\t\t ohne Vorzeichen","\n\t","\n\t","\n\t\t","d","\n\t\t","Dezimal \n\t\t mit Vorzeichen","\n\t","\n\t","\n\t\t","x","\n\t\t","Hexadezimal \n\t\t Kleinschreibung","\n\t","\n\t","\n\t\t","X","\n\t\t","Hexadezimal \n\t\t Großschreibung","\n\t","\n\t","\n\t\t","s","\n\t\t","String","\n\t","\n","\n"," ","\n","Dem Formatzeichen muss ein '%' vorangestellt sein. \n Bei numerischen Formaten kann die Länge sowie führende Nullen parametriert \n werden.","\n","Die maximale Zeichenlänge für die Funktion beträgt \n 10.239 Zeichen.","\n","Beispiel",":","\n","logprintf(0x01, 'String                        : \n %s', 'Text')","\n","logprintf(0x02, 'Decimal without / with sign   : \n %u / %d', 12, -56)","\n","logprintf(0x80000000, 'Hex 4 digits with leading \n zero: %04x', 123)","\n"," ","\n"],["\n","\n","Deklaration: LogPrintfEx(long logHandle, long klasse, \n string format, ...)","\n","Der Befehl erzeugt einen String aus einem Formatstring \n ","format"," und einer beliebigen Anzahl Parameter und schreibt ihn in \n das durch logHandle angegebene Logbuch. ","klasse"," ist bitcodiert, \n d.h. für Klasse 7 muss 0x40 übergeben werden. Die Parameter können Strings \n oder numerische Werte sein. Für den Formatstring gelten folgende Angaben:","\n","\n\t","\n\t\t"," Formatzeichen","\n\t\t","Interpretation","\n\t","\n\t","\n\t\t","u","\n\t\t","Dezimal \n\t\t ohne Vorzeichen","\n\t","\n\t","\n\t\t","d","\n\t\t","Dezimal \n\t\t mit Vorzeichen","\n\t","\n\t","\n\t\t","x","\n\t\t","Hexadezimal \n\t\t Kleinschreibung","\n\t","\n\t","\n\t\t","X","\n\t\t","Hexadezimal \n\t\t Großschreibung","\n\t","\n\t","\n\t\t","s","\n\t\t","String","\n\t","\n","\n"," ","\n","Dem Formatzeichen muss ein '%' vorangestellt sein. \n Bei numerischen Formaten kann die Länge sowie führende Nullen parametriert \n werden.","\n","Beispiel",":","\n","long     logHandle","\n","logHandle := LogCreate('logxy',","\n","                       'home/legato/log',","\n","                       20, \n 10 * 1024 * 1024,","\n","                       10,      1024 \n * 1024","\n","                      )","\n","logPrintfEx(logHandle, 0x40, 'String %s', 'Text')","\n","logPrintfEx(logHandle, 0x40, 'Dezimal %d', 123)","\n","logPrintfEx(logHandle, 0x80000000, 'Hex %04x', \n 123)","\n"," ","\n"],["\n","\n","Deklaration: LogPuts(int klasse, string text)","\n","Schreibt den String ","text"," ins Logbuch. Dabei \n wird nicht, wie bei Debug die Klasse 7, sondern die mit ","klasse"," \n übergebene Klasse verwendet. ","klasse"," ist bitcodiert, d.h. für Klasse \n 7 muss 0x40 übergeben werden.","\n","Beispiel",":","\n","if OPC.GOPS.PLC1.Pressure > 100 then","\n","  logputs(0x80000000, 'WARNING: Pressure \n too high!')","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: LogPutsEx(long logHandle, long klasse, \n string text)","\n","Schreibt den String ","text"," in das durch logHandle \n angegebene Logbuch. ","klasse"," ist bitcodiert, d.h. für Klasse 7 muss \n 0x40 übergeben werden.","\n","Beispiel",":","\n","long     logHandle","\n","logHandle := LogCreate('logxy',","\n","                       'home/legato/log',","\n","                       20, \n 10 * 1024 * 1024,","\n","                       10,      1024 \n * 1024","\n","                      )","\n","logPutsEx(logHandle, 0x80000000, 'Text xy')","\n"," ","\n"],["\n","\n","Deklaration: Trace(string text) ","\n","Sendet den String ","text"," an das Logfenster im \n Editor.","\n","Beispiel",":","\n","if \n OPC.GOPS.PLC1.Pressure > 100 then","\n","  trace('WARNING: Pressure too high!')","\n","endif ","\n"," ","\n\n\n"]],"2":[["Logbuchfunktionen"]],"4":[["Debug"],["DebugBlkDump"],["DebugVarDump"],["LogConfig"],["LogCreate"],["LogDump"],["LogDumpEx"],["LogPrintf"],["LogPrintfEx"],["LogPuts"],["LogPutsEx"],["Trace"]],"id":"62"})