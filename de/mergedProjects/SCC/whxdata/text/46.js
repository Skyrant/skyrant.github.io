rh._.exports({"0":[["Steuern von Elementen"]],"1":[["\n"],["\n","In Scripten können auch Steuerfunktionen von Elementen \n ausgeführt werden.","\n"],["\n","\n","Deklaration: bool connect(string name)","\n","Die Variable mit dem Namen ","name"," wird verbunden.","\n","Beispiel",":","\n","bool     b, c","\n","if b then","\n","  c := connect('OPC.PLC1.Alarmblock')","\n","else","\n","  c := disconnect ('OPC.PLC1.Alarmblock')","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: bool CreateNode(string name, string \n params) ","\n","Die Variable mit dem Namen ","name"," wird im Baum \n gesucht und ein neuer Unterknoten angelegt. Der neue Knoten wird durch \n ","params"," beschrieben. ","params"," \n muss im XML-Format übergeben werden und richtig formatiert werden. Die \n Anwendung dieser Funktion erfordert genaue Kenntnisse über den Aufbau \n der Projektdatei!","\n","Beispiel",":","\n","bool     rv","\n","if ","not \n IsVar(Path+'.'+Name) then","\n","   rv \n := CreateNode(Path, '<memitm name=\"'+Name+'\" fmt=\"Block\" \n init=\"00 00 00 00 \" mul=\"'+ltostr(Size,10)+'\" always=\"true\"/>')","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: bool CreateNodeTemp(string name, string \n params) ","\n","Die Variable mit dem Namen ","name"," wird im Baum \n gesucht und ein neuer Unterknoten angelegt. Der neue Knoten wird durch \n ","params"," beschrieben. ","params"," \n muss im XML-Format übergeben werden und richtig formatiert werden. Die \n erstellten Knoten werden mit \"nicht mit Projekt speichern\" markiert. \n Die Anwendung dieser Funktion erfordert genaue Kenntnisse über den Aufbau \n der Projektdatei!","\n","Beispiel",":","\n","bool     rv","\n","if ","not \n IsVar(Path+'.'+Name) then","\n","   rv \n := CreateNode(Path, '<memitm name=\"'+Name+'\" fmt=\"Block\" \n init=\"00 00 00 00 \" mul=\"'+ltostr(Size,10)+'\" always=\"true\"/>')","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: long DeleteNode(string name)  ","\n","Löscht den durch ","name"," angegebenen Knoten. ","\n","\n\t","\n\t","\n\t","\n\t\t","Returnwert = 0 ","\n\t\t","Funktion wurde fehlerfrei ausgeführt.","\n\t","\n\t","\n\t\t","Returnwert = 1","\n\t\t","Knoten nicht vorhanden.","\n\t","\n","\n","Beispiel",":","\n","long     rv","\n","rv \n :="," DeleteNode('SendRecv.TCP.ServerX') ","\n"," ","\n"],["\n","\n","Deklaration: bool ExtNodeFunc(string name, string \n func)   ","\n","Führt bei dem durch ","name"," angegebenen Knoten \n die Funktion ","func"," durch. \n Konnte die Funktion durchgeführt werden, wird true zurückgegeben.","\n","Mögliche Werte für ","func",":","\n","'connect', \n 'disconnect', 'read', 'write', 'subscribe', unsubscribe'","\n","Beispiel",":","\n","bool     rv","\n","rv \n :="," ExtNodeFunc('OPC_UA.PLC1.Heater.Temperature', 'read') ","\n"," ","\n"],["\n","\n","Deklaration: bool disconnect(string name)","\n","Die Variable mit dem Namen ","name"," wird aus dem \n Ablauf genommen.","\n","Beispiel",":","\n","bool     b, c","\n","if b then","\n","  c := connect('OPC.PLC1.Alarmblock')","\n","else","\n","  c := disconnect ('OPC.PLC1.Alarmblock')","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: long GetNodeFlag(string name)","\n","Die Flags der Variable mit dem Namen ","name"," werden \n ausgelesen.","\n","\n\t","\n\t\t","Bit","\n\t\t","Bedeutung","\n\t","\n\t","\n\t\t","0","\n\t\t","Element \n\t\t gültig","\n\t","\n\t","\n\t\t","1","\n\t\t","Umbenennen \n\t\t und Löschen erlaubt","\n\t","\n\t","\n\t\t","2","\n\t\t","Element \n\t\t wird verwendet","\n\t","\n\t","\n\t\t","3","\n\t\t","Hat \n\t\t Referenzen","\n\t","\n\t","\n\t\t","4","\n\t\t","Kann \n\t\t in Script verwendet werden","\n\t","\n\t","\n\t\t","5","\n\t\t","Wird \n\t\t nicht mit Projekt gestartet","\n\t","\n\t","\n\t\t","6","\n\t\t","Lesezugriff","\n\t","\n\t","\n\t\t","7","\n\t\t","Schreibzugriff","\n\t","\n\t","\n\t\t","8","\n\t\t","Logmeldungen \n\t\t Ein","\n\t","\n\t","\n\t\t","9","\n\t\t","Beobachten","\n\t","\n\t","\n\t\t","10","\n\t\t","Ruft \n\t\t bei Wertänderung Script auf","\n\t","\n\t","\n\t\t","11","\n\t\t","Rangiert \n\t\t bei Wertänderung","\n\t","\n\t","\n\t\t","12","\n\t\t","Verbunden","\n\t","\n\t","\n\t\t","13","\n\t\t","Unterbrochen","\n\t","\n\t","\n\t\t","14","\n\t\t","Ordner","\n\t","\n\t","\n\t\t","15","\n\t\t"," ","\n\t","\n","\n","Beispiel",":","\n","long     flags","\n","flags := GetNodeFlag('OPC.GOPS.PLC1.Alarmblock')","\n","if (flags and 0x100) <> 0  then","\n","  debug('\"Logentries\" is active')","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: int GetNodeType(string name)","\n","Der Typ der Variable mit dem Namen ","name"," wird \n ausgelesen.","\n","Beispiel",":","\n","int i","\n","string s","\n","i := getnodetype('OPC.SPS1.STATUS')","\n","switch i","\n","      case 0:","\n","                s \n := 'NIL'","\n","                break","\n","      case 1:","\n","                s \n := 'BOOL'","\n","                break","\n","      case 2:","\n","                s \n := 'LONG'","\n","                break","\n","      case 3:","\n","               s \n := 'DOUBLE'","\n","                break","\n","      case 4:","\n","                s \n := 'STRING'","\n","                break","\n","      case 5:","\n","                s \n := 'BLOCK'","\n","                break","\n","end","\n"," ","\n"],["\n","\n","Deklaration: SetCyclEvent(string name, long wert, \n long modus)","\n","Die Event-Variable mit dem Namen ","name"," wird mit \n neuen Triggerwerten versorgt. Die Event-Variable muss den Typ \"zyklisch\" \n haben. ","wert"," gibt das neue Intervall in ms an. ","Modus"," spezifiziert \n den neuen Triggerpunkt:","\n","\n\t","\n\t\t"," Modus","\n\t\t","Bedeutung","\n\t","\n\t","\n\t\t","0","\n\t\t","Der \n\t\t Event wird mit dem Aufruf des Befehls ausgelöst und danach zyklisch \n\t\t in neuem Abstand.","\n\t","\n\t","\n\t\t","1","\n\t\t","Der \n\t\t Event wird ausgelöst, wenn der alte Zeitwert überschritten wird.","\n\t","\n\t","\n\t\t","2","\n\t\t","Der \n\t\t Event wird ausgelöst, wenn der neue Zeitwert überschritten wird \n\t\t oder bereits überschritten wurde.","\n\t","\n","\n","Beispiel",":","\n","bool     b","\n","if b then","\n","  SetCyclEvent('Event.Timer', 1000, 0)","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: SetTimeEvent(string name, string zeit, \n long maske)","\n","Die Event-Variable mit dem Namen ","name"," wird mit \n neuen Triggerwerten versorgt. Die Event-Variable muss vom Typ \"Zeittrigger\" \n oder \"Zeitpunkt\" sein. ","zeit"," gibt den neuen Triggerpunkt \n im Format \"HH:mm:ss\" (Zeittrigger) bzw. \"DD.MM.YY HH:mm:ss\" \n (Zeitpunkt) an. ","maske"," ist nur bei Zeittriggern von Bedeutung und \n maskiert die Wochentage für das Event, wobei Bit 0 dem Sonntag entspricht, \n Bit 1 dem Montag usw.","\n","Beispiel",":","\n","bool     b","\n","if b then","\n","  SetTimeEvent('Event.Timer', '01:00:00', \n 0)","\n","endif","\n"," ","\n\n\n"]],"2":[["Steuern von Elementen"]],"4":[["Connect"],["CreateNode"],["CreateNodeTemp"],["DeleteNode"],["ExtNodeFunc"],["Disconnect"],["GetNodeFlag"],["GetNodeType"],["SetCyclEvent"],["SetTimeEvent"]],"id":"46"})