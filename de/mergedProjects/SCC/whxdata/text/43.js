rh._.exports({"0":[["SQL-Funktionen auf Verbindungsebene"]],"1":[["\n"],["\n"],["\n","\n","Deklaration: Break","\n","Die Verbindung wird beendet, weitere SQL-Statements \n werden gepuffert. Die Verbindung wird nicht, wie bei Fehlern (z.B. Netzwerkfehler \n etc.), zyklisch neu aufgebaut, sondern bleibt deaktiviert, bis sie durch \n den Befehl \"Connect\" wieder angestoßen wird.","\n","Beispiel",":","\n","bool     b","\n","Database.Legato.Connect","\n","if b then","\n","  Database.Legato.Break","\n","endif","\n"," ","\n"],["\n","\n","Deklaration: Connect","\n","Wurde die Datenbankverbindung durch Aufruf von \"Break\" \n deaktiviert, muss sie durch den Befehl ","Connect"," wieder neu angestoßen \n werden.","\n","Beispiel",":","\n","Database.Legato.Connect","\n"," ","\n"],["\n","\n","Deklaration: long CreatePool(long n)","\n","Legt bei der Verbindung einen Pool mit der angegebenen \n Anzahl ","n"," Threads an.","\n","\n\t","\n\t\t","Returnwert \n\t\t = 0","\n\t\t","Funktion \n\t\t wurde fehlerfrei ausgeführt.","\n\t","\n","\n","Beispiel",":","\n","Database.Server.CreatePool(5)","\n"," ","\n"],["\n","\n","Deklaration: long CreatePool(long n, string stmt)","\n","Legt bei der Verbindung einen Pool mit der angegebenen \n Anzahl ","n"," Threads an. Das übergebene SQL-Statement ","stmt"," \n wird bei Verbindungsaufbau bzw. Verbindungswiederkehr ausgeführt.","\n","\n\t","\n\t\t","Returnwert \n\t\t = 0","\n\t\t","Funktion \n\t\t wurde fehlerfrei ausgeführt.","\n\t","\n","\n","Beispiel",":","\n","Database.Server.CreatePoolEx(","5, \n 'ALTER SESSION SET CURSOR_SHARING=SIMILAR SESSION_CACHED_CURSORS=200'",")","\n"," ","\n"],["\n","\n","Deklaration: Execute(string sqlstr)","\n","Ausführen eines SQL-Statements.","\n","Beispiel",":","\n","Database.Server.Execute('select * from table1')","\n"," ","\n"],["\n","\n","Deklaration: long InitSpool(long num)","\n","Legt bei der Verbindung einen Spool mit der angegebenen \n Nummer ","num"," an. Die Spooldateien werden im Unterverzeichnis \"dbspool\" \n des Projekts angelegt. Der Name der Spooldateien wird aus Verbindungsname \n + _ + Spoolnummer + _ + fortlaufende Nummer im Hexadezimalformat gebildet. \n Die Länge des Dateinamens von Spooldateien ist auf 256 Zeichen beschränkt.","\n","\n\t","\n\t\t","Returnwert \n\t\t = 0","\n\t\t","Funktion \n\t\t wurde fehlerfrei ausgeführt.","\n\t","\n","\n","Beispiel",":","\n","Database.Server.InitSpool(3)","\n"," ","\n"],["\n","\n","Deklaration: long InitSpoolEx(long num, string stmt)","\n","Legt bei der Verbindung einen Spool mit der angegebenen \n Nummer ","num"," an. Die Spooldateien werden im Unterverzeichnis \"dbspool\" \n des Projekts angelegt. Der Name der Spooldateien wird aus Verbindungsname \n + _ + Spoolnummer + _ + fortlaufende Nummer im Hexadezimalformat gebildet. \n Die Länge des Dateinamens von Spooldateien ist auf 256 Zeichen beschränkt. \n Das übergebene SQL-Statement ","stmt"," \n wird bei Verbindungsaufbau bzw. Verbindungswiederkehr ausgeführt.","\n","\n\t","\n\t\t","Returnwert \n\t\t = 0","\n\t\t","Funktion \n\t\t wurde fehlerfrei ausgeführt.","\n\t","\n","\n","Beispiel",":","\n","Database.Server.InitSpoolEx(","3, \n 'ALTER SESSION SET CURSOR_SHARING=SIMILAR SESSION_CACHED_CURSORS=200'",")","\n"," ","\n"],["\n","\n","Deklaration: long SelectAsynch(long prio,","\n                               string \n sqlstr,","\n                               block \n userdata,","\n                               string \n resultvarname)","\n","Ausführung des angegebenen SQL-Statements ","sqlstr"," \n mit der angegebenen Priorität ","prio"," (1 = höchste Priorität, je größer \n der Wert von prio ist, umso geringere Priorität) als asynchroner Select.","\n","In ","UserData"," wird der Funktion ein Datenblock \n mit benutzerspezifischen Daten mitgegeben.","\n","Resultvarname"," ist der Name einer Datenblock-Variablen, \n die das Ergebnis des asynchronen Selects und des benutzerspezifischen \n Datenblocks erhält.","\n","Der Pool muss vorher durch die Funktion \"CreatePool\" \n angelegt worden sein.","\n","Returnwert = 0 ","è"," \n Funktion wurde fehlerfrei ausgeführt.","\n","Nach der Ausführung des asynchronen Selects wird das \n Ergebnis in die angegebene Datenblock-Variable mit folgendem Format geschrieben:","\n","\n\t","\n\t\t","Position","\n\t\t","Länge","\n\t\t","Bedeutung","\n\t","\n\t","\n\t\t","0","\n\t\t","4","\n\t\t","Datenbankreturncode \n\t\t (0 = ok, ansonsten Nummer des Datenbankfehlers)","\n\t","\n\t","\n\t\t","4","\n\t\t","4","\n\t\t","Länge \n\t\t der benutzerspezifischen Daten","\n\t","\n\t","\n\t\t","8","\n\t\t","n","\n\t\t","Benutzerspezifische \n\t\t Daten","\n\t","\n\t","\n\t\t","8 \n\t\t + n","\n\t\t","x","\n\t\t","Ergebnismenge \n\t\t des Selects im CSV Format","\n\t","\n","\n","Beispiel",":","\n","block    UserData","\n","long     prio","\n","string   sqlstr","\n","prio := 10","\n","UserData := newblock(19)","\n","setblocknum(UserData,  0,  4, \n true, 1234)","\n","setblockstr(UserData,  4, 15, 'Select \n SYS_JOBS')","\n","sqlstr := 'select * from SYS_JOBS'","\n","Database.Server.SelectAsynch(prio, sqlstr, UserData,","\n","                             'Value.BlkVarXYZ')","\n"," ","\n"],["\n","\n","Deklaration: long Spool(long num, string sqlstr)","\n","Eintrag eines SQL-Statements ","sqlstr"," in den Spool \n mit der angegebenen Nummer ","num"," der Verbindung. Die Funktion kehrt \n sofort zurück. Der Spool muss vorher durch die Funktion \"InitSpool\" \n angelegt worden sein.","\n","\n\t","\n\t\t","Returnwert \n\t\t = 0","\n\t\t","Funktion \n\t\t wurde fehlerfrei ausgeführt.","\n\t","\n","\n","Beispiel",":","\n","Database.Server.Spool(3, 'call p_sync_sys_module(1)')","\n"," ","\n"],["\n","\n","Deklaration: long SpoolEx(long num, string sqlstr, \n long max time)","\n","Eintrag eines SQL-Statements ","sqlstr"," in den Spool \n mit der angegebenen Nummer ","num"," der Verbindung. Ist das SQL-Statement \n länger im Spool als ","max time"," in Millisekunden, so wird es nicht \n mehr ausgeführt, sondern verworfen. Die Funktion kehrt sofort zurück. \n Der Spool muss vorher durch die Funktion \"InitSpool\" angelegt \n worden sein.","\n","\n\t","\n\t\t","Returnwert \n\t\t = 0","\n\t\t","Funktion \n\t\t wurde fehlerfrei ausgeführt.","\n\t","\n","\n","Beispiel",":","\n","Database.Server.SpoolEx(3, 'call p_sync_sys_module(1)', \n 1000)","\n"," ","\n\n\n"]],"2":[["SQL-Funktionen auf Verbindungsebene"]],"4":[["Break"],["Connect"],["CreatePool"],["CreatePoolEx"],["Execute"],["InitSpool"],["InitSpoolEx"],["SelectAsynch"],["Spool"],["SpoolEx"]],"id":"43"})