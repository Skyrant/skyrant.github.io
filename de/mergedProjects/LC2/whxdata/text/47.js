rh._.exports({"0":[["Regular Expressions - Reguläre Ausdrücke"]],"1":[["Regulärer Ausdruck,Regular Expression"]],"2":[["\n"],["\n","In ein paar Tabellen kann über sogenannte \"Regular \n Expressions\" das Format von Identifiern überprüft werden. Hierfür \n werden die Regeln von Oracle verwendet. Die folgende Kurzbeschreibung \n deckt die am häufigsten verwendeten regulären Ausdrücke ab und bietet \n einige Beispiele zur Anwendung.","\n","Eine \"normale\" \n ","Zeichenfolge"," im Suchmuster muss genau so im Text vorkommen (z.B. \n passt zum Muster \"in\" der Text \"Bein\", aber nicht \n \"nicht\")","\n","Bestimmte \n Zeichen, die sogenannten \"","reservierten Zeichen","\" müssen \n im Suchmuster durch einen umgekehrten Schrägstrich (\"Backslash\") \n davor gekennzeichnet werden. Diese sind: ","+?.*^$()[]{}|\\","\n","Beispiel: \n \"data\\[0\\]\" zum Suchen von \"data[0]\".","\n","Um nach \n ","Zeichen"," ","aus einer bestimmten Menge"," zu suchen, werden die \n entsprechenden Zeichen in eckigen Klammern notiert. So passen zum Muster \n \"[xy]\" nur Ergebnisse, die mindestens ein \"x\" oder \n ein \"y\" enthalten.","\n","Um nach \n ","Zeichen"," zu suchen, ","die nicht einer bestimmten Menge angehören",", \n wird die Menge mit einem \"^\" negiert, z.B. passen zu \"[^xy]\" \n nur Ergebnisse, die weder ein \"x\" noch ein \"y\" enthalten.","\n","Zeichen \n in einem bestimmten Bereich"," können durch das erste und letzte zum \n Bereich gehörige Zeichen und ein \"-\" dazwischen abgekürzt werden. \n \"[0-9]\" sucht also nach Einträgen, in denen mindestens eine \n Ziffer vorkommt. Achtung: Umlaute o.Ä. gehören leider nicht zum Bereich \n \"[a-z]\". Soll \"-\" eines der Zeichen sein, nach denen \n gesucht wird, muss das Minus-Zeichen durch einen Backslash davor seiner \n Bedeutung enthoben werden: \"[a\\-z]\" sucht also nach Ergebnissen, \n die mindestens ein 'a', ein '-' oder ein 'z' enthalten.","\n","Für einige \n ","Zeichenmengen"," und deren ","Negierungen"," gibt es abgekürzte Schreibweisen:","\n","\\d              Ziffern \n (\"digits\")","\n","\\D             alles \n außer Ziffern","\n","\\w             Buchstaben, \n Ziffern oder Unterstriche (\"words\")","\n","\\W            alles \n außer Buchstaben, Ziffern oder Unterstrichen","\n","\\n              Zeilenumbruch","\n","\\r               Wagenrücklauf \n (\"carriage return\")","\n","\\t               Tabulator","\n"," \\f              Seitenumbruch","\n"," \\s              Leerzeichen, \n Zeilenumbruch, Wagenrücklauf, Tabulator oder Seitenumbruch","\n"," \\S             Alles \n außer Leerzeichen etc.","\n"," .                 ein \n beliebiges Zeichen","\n","Einige \n besondere ","Positionen"," können auch angegeben werden:","\n","\\b              Wortgrenze, \n z.B. \"um\\b\" passt zu \"Baum\" und \"warum\", \n aber nicht zu \"umgehen\", \"\\bum\" passt zu \"umständlich\", \n aber nicht zu \"kaum\"","\n","\\B              nicht \n an Wortgrenze","\n","^                Beginn \n des Textes. \"^SPS\" passt also zum Text \"SPS1 ...\", \n aber nicht zu \"Verbindung SPS5.....\"","\n$                Ende \n des Textes","\n","Wiederholungen \n von Zeichen"," können durch folgende Konstrukte angegeben werden:","\n","?               kein \n oder genau ein Vorkommen, z.B. passen zu \"Mei?er\" sowohl \"Meer\" \n als auch \"Meier\"","\n+               ein \n oder mehrere Vorkommen, z.B. passen zu \"au+a\" sowohl \"aua\" \n als auch \"auuuua\", aber nicht \"aa\"","\n*                beliebig \n viele Vorkommen. Zu \"au*a\" passen \"aa\", \"aua\", \n \"auua\" u.s.w.","\n{n}            genau \n n Vorkommen: Zu \"H.{2}m\" passen z.B. \"Heim\", \"Helm\", \n \"Harm\", weil genau 2 Zeichen zwischen \"H\" und \"m\" \n stehen","\n","Alternativen"," \n werden mittels des Senkrecht-Strichs | (\"Pipe\"-Symbol) notiert. \n So passt \"\\bin\\b|\\bum\\b\" zu allen Texten, die eines der Wörter \n \"in\" oder \"um\" enthalten.","\n","Teilausdrücke"," \n können mit runden Klammern gebildet werden, z.B. findet \"dideld(um|ei)\" \n entweder \"dideldum\" oder \"dideldei\".","\n","Ein ","Leerstring"," \n kann durch Prüfung auf den Text 'NULL' gefunden werden.","\n"," ","\n","Die ","Rangfolge der Operatoren"," in einem regulären \n Ausdruck ist","\n","()                 Klammern","\n","+*?{}            Wiederholung","\n","abc \n []          Zeichen, \n -ketten, -mengen und abgekürzte Schreibweisen dafür, sowie Positionen","\n","|                  Alternativen","\n"," ","\n","Die folgende Tabelle fasst die Bedeutung der regulären \n Ausdrücke gemäß Oracle noch einmal kurz zusammen:","\n"," ","\n","\n\t","\n\t\t","Operator","\n\t\t","Beschreibung","\n\t\t","Beispiel","\n\t","\n\t","\n\t\t","\\","\n\t\t","Backslash. Der Backslash \n\t\t kann abhängig vom Kontext vier verschiedene Bedeutungen haben. \n\t\t Er kann:","\n\t\t","-","      "," für \n\t\t sich stehen","\n\t\t","-","      "," den \n\t\t nächsten Buchstaben zitieren","\n\t\t","-","      "," einen \n\t\t Operator einleiten","\n\t\t","-","      "," nichts \n\t\t tun","\n\t\t","\"\\+\" sucht \n\t\t nach dem Zeichen Plus (\"+\"). Findet z.B. \"abc+def\". \n\t\t Findet nicht \"abcdef\".","\n\t","\n\t","\n\t\t","*","\n\t\t","Beliebig viele Vorkommen \n\t\t (auch keines) des vorangegangenen Zeichens / Ausdrucks.","\n\t\t","\"ab*c\" findet \n\t\t \"ab\", \"abc\", \"abbc\". Findet nicht \n\t\t \"abb\".","\n\t","\n\t","\n\t\t","+","\n\t\t","Mindestens ein Vorkommen \n\t\t des vorangegangenen Zeichens / Ausdrucks.","\n\t\t","\"a+\" findet \n\t\t \"a\", \"aa\", \"aaa\". Findet nicht \"bbb\".","\n\t","\n\t","\n\t\t","?","\n\t\t","Kein oder höchstens \n\t\t ein Vorkommen des vorangegangenen Zeichens / Ausdrucks.","\n\t\t","\"ab?c\" findet \n\t\t \"abc\" und \"ac\". Findet nicht \"abbc\".","\n\t","\n\t","\n\t\t","|","\n\t\t","\"Oder\" Operator, \n\t\t um Alternativen anzuzeigen.","\n\t\t","\"a|b\" findet \n\t\t \"a\" oder \"b\".","\n\t","\n\t","\n\t\t","^","\n\t\t","Entspricht dem Zeichen \n\t\t am Anfang des Textes.","\n\t\t","\"^def\" findet \n\t\t \"defghi\". Findet nicht \"abcdef\".","\n\t","\n\t","\n\t\t","$","\n\t\t","Entspricht dem Zeichen \n\t\t am Ende des Textes.","\n\t\t","\"def$\" findet \n\t\t \"abcdef\". Findet nicht \"defghi\".","\n\t","\n\t","\n\t\t",".","\n\t\t","Entspricht einem beliebigen \n\t\t Zeichen außer NULL.","\n\t\t","\"a.b\" findet \n\t\t \"abb\", \"acb\", \"adb\". Findet nicht \n\t\t \"acc\".","\n\t","\n\t","\n\t\t","[ \n\t\t ]","\n\t\t","Liste von passenden \n\t\t Zeichen. Eine negierte Liste beginnt mit ^ und spezifiziert eine \n\t\t Liste die allen Zeichen entspricht, die nicht in der Liste enthalten \n\t\t sind.","\n\t\t","\"[abc]\" findet \n\t\t \"all\", \"bill\" und \"cold\". Findet \n\t\t nicht \"doll\".","\n\t","\n\t","\n\t\t","( \n\t\t )","\n\t\t","Gruppiert einen (Unter)Ausdruck \n\t\t (Substring).","\n\t\t","\"(abc)?def\" \n\t\t entspricht \"abc\", gefolgt von \"def\". Findet \n\t\t \"abcdefghi\" und \"def\". Findet nicht \"ghi\".","\n\t","\n\t","\n\t\t","{m}","\n\t\t","Genau m Vorkommen.","\n\t\t","\"a{3}\" findet \n\t\t \"aaa\". Findet nicht \"aa\".","\n\t","\n\t","\n\t\t","{m,}","\n\t\t","Mindestens m Vorkommen.","\n\t\t","\"a{3,}\" findet \n\t\t \"aaa\" und \"aaaa\". Findet nicht \"aa\".","\n\t","\n\t","\n\t\t","{m,n}","\n\t\t","Mindestens m Vorkommen, \n\t\t aber höchstens n Vorkommen.","\n\t\t","\"a{3,5}\" findet \n\t\t \"aaa\", \"aaaa\", \"aaaaa\". Findet nicht \n\t\t \"aa\".","\n\t","\n\t","\n\t\t","\\n","\n\t\t","Rückwärtsreferenz (mit \n\t\t n als Zahl zwischen 1  und 9) entspricht dem n","ten"," \n\t\t Unterausdruck zwischen '(' und ')' vor dem \\n.","\n\t\t","\"(abc|def)xy\\1)\" \n\t\t findet \"abcxyabc\" und \"defxydef\". Findet nicht \n\t\t \"abcxydef\" oder \"abcxy\".","\n\t","\n","\n"," ","\n\n\n"]],"4":[["Regular Expressions - Reguläre Ausdrücke"]],"id":"47"})