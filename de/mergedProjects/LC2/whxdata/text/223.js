rh._.exports({"0":[["Skript-Überblick"]],"2":[["\n"],["\n","Für jede Projektierungsvorlage wird ein Skript erstellt, \n mit dem der TemplateHelper konfiguriert wird. Dieses Script muss den Aufruf \n \"initActions\" beinhalten:","\n","function initActions(context, args) {","\n","var th = args.templateHelper; ","\n","var action1 = th.addAction(\"con1\", \"Connection\", \n \"p_connections\");","\n","action1.addField(\"connection_symbol\", th.getParamValue(\"akz\"), \n false);","\n","action1.addField(\"name_0\", th.getParamValue(\"plcname\"), \n false);","\n","action1.addField(\"module\", 9, false);","\n","action1.addField(\"default_node\", th.getParamValue(\"default_node\"), \n false);","\n"," ","\n","var action2 = th.addAction(\"var1\", \"Variable \n 1\", \"p_values_config\");","\n","action2.addField(\"connection\", action1, false)","\n","action2.addField(\"value_symbol\", th.getParamValue(\"akz\") \n + \".CNT0001\", false);","\n","action2.addField(\"value_format\", 1, false);","\n","action2.addField(\"value_type\", 2, false);","\n","action2.addField(\"name_0\", \"Counter \n 1\", false);","\n"," ","\n","var action3 = th.addAction(\"var2\", \"Variable \n 2\", \"p_values_config\");","\n","action3.addField(\"connection\", action1, false)","\n","action3.addField(\"value_symbol\", th.getParamValue(\"akz\") \n + \".CNT0002\", false);","\n","action3.addField(\"value_format\", 1, false);","\n","action3.addField(\"value_type\", 2, false);","\n","action3.addField(\"name_0\", \"Counter \n 2\", false);","\n","}","\n"," ","\n","Der TemplateHelper (in der Sapient Engine in Java implementiert) \n stellt folgende Hauptfunktionen zur Verfügung:","\n","Erstellen einer Vorlageninstanz","\n","Aktualisieren einer Vorlageninstanz","\n","Löschen einer Vorlageninstanz","\n","Prüfen, welche Änderungen sich bei der Ausführung \n o.g. Funktionen ergeben würden","\n"," ","\n","Wird eine dieser Funktionen aufgerufen, sucht der TemplateHelper \n das passende Vorlagenscript (dieses ist im Feld CT_TEMPLATES.PROPERTIES \n hinterlegt) und ruft dessen \"initActions\"-Funktion auf. Über \n den \"context\" steht dort eine Referenz auf den TemplateHelper \n zur Verfügung. Dort werden ein oder mehrere Aktionen (korrespondierende \n Klasse TemplateAction) angelegt. Jede Aktion entspricht einer Datarow \n (normalerweise ein Eintrag in den Legato-Konfigurationstabellen). Der \n JsTemplateHelper stellt ein Host-Objekt zur Verfügung, um den TemplateHelper \n im Script verwenden zu können. Dieser bietet zum Anlegen von Aktionen \n die Methode TemplateHelper.addAction an:","\n","templateElementKey: eindeutige Kennung (als String) \n innerhalb des Templates","\n","description: kurze Beschreibung (wird z.B. im \n Log zur Klartextanzeige einer Aktion verwendet)","\n","tableName: Name der Zieltabelle","\n"," ","\n","Für jede Aktion wird angegeben, welche Tabellenfelder \n durch die Aktion beschrieben werden. Parameter von TemplateAction.addField:","\n","fieldName: Feldname","\n","newValue: gewünschter Feldwert - in den meisten \n Fällen ein fester Wert. Soll das Feld auf einen Datensatz verweisen, der \n zuvor innerhalb der Vorlage anhand einer Aktion definiert ist, wird die \n gewünschte Aktion als Feldwert zugewiesen. Diese Referenz wird dann bei \n Bedarf intern aufgelöst und auf die tatsächliche ID des Zieldatensatzes \n gesetzt.","\n","preventUpdate: false --> der Feldwert wird \n generell wie gewünscht gesetzt / true --> der Wert wird nur beim Anlegen \n des Zieldatensatzes gesetzt, bei der späteren Aktualisierung des Vorlagenelements \n werden diese Felder nicht mehr überschrieben, d.h. in der Zwischenzeit \n manuell geänderte Feldwerte (typisch: Sortierreihenfolge von Elementen) \n bleiben erhalten.","\n"," ","\n","Diese Aktionen werden dann zur Ausführung der gewünschten \n Funktion zugrunde gelegt.","\n"],["\n","Es wird empfohlen, erweiterte Eigenschaften in Projektierungsvorlagen \n genauso wie Felder zu beschreiben bzw. hinzuzufügen.","\n","Beispiel:","\n","function initActions(context, args) {","\n","var th = args.templateHelper; ","\n","var actNode = th.addAction(\"node\", \"Logical \n Structure Node\", \"l_nodes\");","\n","actNode.addField(\"parent\", th.getParamValue(\"parent_node\"), \n false);","\n","actNode.addField(\"node_level\", 4, false);","\n","actNode.addField(\"factor\", 1, false);","\n","actNode.addField(\"offset_sec\", 0, false); \n ","\n","actNode.addField(\"short_name\", th.getParamValue(\"short_name\"), \n false);","\n","actNode.addField(\"name_0\", th.getParamValue(\"name\"), \n false);","\n","actNode.addField(\"name_1\", th.getParamValue(\"name\"), \n false);","\n","actNode.addField(\"sc1359_int\", 17, false); \n  // Attribute","\n","}","\n"," ","\n"],["\n","Die Funktionalität für die Verwaltung von Projektierungs-Vorlagen \n und Vorlageninstanzen ist im Namespace de.gefasoft.sapient.sapieng.util.configurationtemplates \n (SeEngine) implementiert:","\n","TemplateHelper: implementiert die Hauptfunktionen \n zum Anlegen/Aktualisieren (inkl. Überprüfen der Änderungen) und Löschen \n von Instanzelementen","\n","TemplateAction: Beschreibt eine einzelne Instanziierungs-Aktion \n (Insert/Update in beliebige Konfigurationstabellen)","\n","TemplateField: Felder, die innerhalb einer Aktion \n aktualisiert werden","\n"," ","\n","Die entsprechenden Wrapper für die Verwendung des TemplateHelper \n im Rhino-Script finden sich im Namespace de.gefasoft.sapient.sapieng.exec.js.host \n (SeEngine):","\n","JsTemplateHelper","\n","JsTemplateAction","\n"," ","\n","Für den Aufruf aus externen Programmen werden die Hauptfunktionen \n des TemplateHelper via RPC bereitgestellt. Klasse Template.java in de.gefasoft.sapient.db.configurationtemplates \n (SeProcs). Aufrufe:","\n","deleteInstance","\n","evalDeleteInstance","\n","evalUpdateInstance","\n","updateInstance","\n\n\n"]],"3":[["Sapient Engine"]],"4":[["Skript-Überblick"]],"5":[["Erweiterte Eigenschaften (ATTR_JSONB)"]],"id":"223"})