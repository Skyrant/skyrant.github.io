<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../..";
    gCommonRootRelPath = "../../..";
    gTopicId = "4.3.0_7";
  
//]]></script>

  <script type="text/javascript" src="../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey_adj/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" data-condition="Others:Deutsch"/>
<meta name="OriginalFile" content="Legato_ApplicationEngine_de.docx" data-condition="Others:Deutsch"/>
<meta http-equiv="Content-Language" content="de-DE" data-condition="Others:Deutsch"/>
<meta name="condition-tags" content="Others:Deutsch" data-condition="Others:Deutsch"/>
<meta name="generator" content="Adobe RoboHelp 2020" data-condition="Others:Deutsch"/>
<title data-condition="Others:Deutsch">JsonWriter</title>
<link rel="stylesheet" href="../../../assets/css/Legato_Systemdokumentation2.css" type="text/css" data-condition="Others:Deutsch"/>
<style type="text/css" data-condition="Others:Deutsch">/*<![CDATA[*/
body {
	background-color: #ffffff;
}
A:visited {
	
}
A:link {
	
}
/*]]>*/</style>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="JsonWriter">
        <span>JsonWriter</span>
      </div>
      <div class="gotohome" title="Hier klicken, um diese Seite im Zusammenhang anzuzeigen">
        <span>Hier klicken, um diese Seite im Zusammenhang anzuzeigen</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



<h3 data-condition="Others:Deutsch">JsonWriter</h3>
<p class="BodyText" data-condition="Others:Deutsch">Objekte dieses Typs schreiben JSON-Text bereits stückweise 
 zum Server, während er noch übertragen wird. Das heißt, die Daten müssen 
 nicht erst komplett in den Speicher geschrieben werden, ehe sie durchsucht 
 werden können. Vielmehr ist es möglich, die bereits geschriebenen Stücke 
 gleich zu durchsuchen.</p>
<p class="BodyText" data-condition="Others:Deutsch">Objekte werden von anderen Objekten geliefert, z.B. 
 SapientContext.getJsonWriter(), können aber auch durch new JsonWriter() 
 erzeugt werden. Dabei sind folgende Kombinationen von Parametern möglich:</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">new.JsonWriter(printWriter)</p>
<p class="BodyText" data-condition="Others:Deutsch">Gibt JSON auf dem angegebenen PrintWriter aus.</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">newJsonWriter(file)</p>
<p class="BodyText" data-condition="Others:Deutsch">Schreibt JSON in die angegebene Datei. Die Datei  kann 
 entweder als File-Objekt angegeben werden oder der Dateiname als String. 
 Im letzteren Fall wird die Datei im Zeichensatz UTF-8 geschrieben.</p>
<p class="BodyText" data-condition="Others:Deutsch"> </p>
<p class="BodyText" data-condition="Others:Deutsch">JsonWriter haben die folgenden Funktionen:</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">close():</p>
<p class="BodyText" data-condition="Others:Deutsch">Schließt die Datei oder sonstigen Ausgabekanal. Danach 
 kann nicht mehr geschrieben werden.</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">endArray():</p>
<p class="BodyText" data-condition="Others:Deutsch">Beendet das offene JSON-Array.</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">endObject():</p>
<p class="BodyText" data-condition="Others:Deutsch">Schließt das aktuell offene JSON-Objekt ab.</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">field(name, value):</p>
<p class="BodyText" data-condition="Others:Deutsch">Schreibt ein Feld in das aktuelle JSON-Objekt. &quot;value&quot; 
 sollte ein &quot;einfacher&quot; Wert sein, also kein Array oder Objekt. 
 Für solche Werte, siehe startArrayField() und startObjectField().</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">fieldname(name):</p>
<p class="BodyText" data-condition="Others:Deutsch">Schreibt den angegebenen Feldnamen in das aktuelle 
 JSON-Objekt.</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">flush():</p>
<p class="BodyText" data-condition="Others:Deutsch">Schreibt die bisherigen Daten in den Ausgabekanal (und 
 leert den Cache).</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">startArray():</p>
<p class="BodyText" data-condition="Others:Deutsch">Beginnt ein neues JSON-Array.</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">startArrayField(name):</p>
<p class="BodyText" data-condition="Others:Deutsch">Schreibt den Namen eines neuen Array-Felds in das aktuelle 
 JSON-Objekt.</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">startObject():</p>
<p class="BodyText" data-condition="Others:Deutsch">Beginnt ein neues JSON-Objekt.</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">startObjectField(name):</p>
<p class="BodyText" data-condition="Others:Deutsch">Beginnt ein neues JSON-Objekt als Feld im aktuellen 
 JSON-Objekt.</p>
<p class="Textkörperfett" data-condition="Others:Deutsch">value(val):</p>
<p class="BodyText" data-condition="Others:Deutsch">Schreibt den angegebenen Wert.</p>


</body></html>