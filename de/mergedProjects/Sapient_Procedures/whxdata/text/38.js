rh._.exports({"0":[["DbQuery"]],"1":[["\n"],["\n","Objekte dieses Typs dienen zur Ausführung von Datenbank-Abfragen \n (SELECT, UPDATE, INSERT, DELETE) und zum Aufruf von Datenbank-Prozeduren \n oder -Funktionen. Die SQL-Statements können Parameter enthalten, die zwischen \n mehreren Ausführungen des DB-Aufrufs geändert werden können (es muss kein \n neues DbQuery-Objekt erzeugt werden). Aufrufe von DB-Prozeduren und -Funktionen \n können auch Ausgabe-Parameter haben, über die sie Werte an das Script \n zurückliefern.","\n","DbQuery-Objekte werden durch den Konstruktor ","DbQuery(dbcon, \n sql, param_infos, autokeynames)"," angelegt:","\n","\n\t","dbcon muss ein \n\t vorher erzeugtes DbCon-Objekt sein","\n\t","sql ist ein String, \n\t der das SQL-Statement enthält","\n\t","param_infos ist \n\t optional und kann benutzt werden, um die Typen und die \"Richtung\" \n\t der SQL-Parameter anzugeben, wenn diese nicht automatisch bestimmt \n\t werden können (wie es bei Oracle entgegen der Dokumentation leider \n\t der Fall ist). Es sollte ein Array von so vielen Objekten sein, wie \n\t das SQL-Statement Parameter enthält und jedes dieser Objekte sollte \n\t die drei Eigenschaften \"type\" (Zahl), \"input\" \n\t (Boolean) und \"output\" (Boolean) haben.","\n\t","autokeynames \n\t ist ein optionaler Array (JavaScript), der die Spaltennamen von automatisch \n\t generierten Key-Feldern enthält, die vom Insert zurückgegeben werden \n\t sollten.","\n","\n"," ","\n","DbQuery-Objekte haben folgende Eigenschaften:","\n","params","\n","Array mit den Werten von Abfrage-Parametern. Der erste \n Parameter hat darin den Index 1 (DB-Konvention, nicht JavaScript-Konvention).","\n","paramTypes","\n","Array mit den Typ-IDs (siehe die konstanten Eigenschaften \n von DbQuery oben) von Abfrage-Parametern (Array beginnt bei Index 1).","\n","inParams","\n","Werte der Eingabe-Parameter des SQL-Statements. Array \n beginnt mit Index 1 und enthält alle im SQL aufgeführten Parameter. Die \n Werte reiner Ausgabe-Parameter (solche, bei deren Definition \"input\" \n false und \"output\" true angegeben wurde) werden bei der Ausführung \n ignoriert.","\n","outParams","\n","Werte der Ausgabe-Parameter des SQL-Statements. Array \n beginnt mit Index 1 und enthält alle im SQL aufgeführten Parameter.","\n","rowFieldCase","\n","Einer der Werte \"asis\", \"lower\" \n oder \"upper\", je nachdem, ob die Feldnamen in Ergebnis-Zeilen \n so geliefert werden sollen, wie sie der Datenbankbetreiber angibt, oder \n ob sie zu Klein- oder Großbuchstaben gewandelt werden sollen. Standardwert \n ist \"lower\".","\n"," ","\n","DbQuery-Objekte haben die folgenden Funktionen:","\n","query()","\n","(Array): Dient zum Lesen von Daten (SELECT). Liefert \n ein Array mit den Werten aller Felder des ersten abgefragten Datensatzes \n als Ergebnis oder null, falls die Abfrage keinen Datensatz gefunden hat.","\n","next()","\n","(Array): Dient zum Lesen weiterer Datensätze nach einer \n Abfrage mittels query(). Liefert wie diese ein Array mit den Werten aller \n Felder des ersten abgefragten Datensatzes als Ergebnis oder null, falls \n es keine weiteren Datensätze zu lesen gibt.","\n","execute()","\n","(Zahl): Führt eine SQL-Anweisung aus, die keine Datensätze \n liefert. Bei Anweisungen, die Datensätze ändern (UPDATE, INSERT, DELETE) \n liefert sie als Ergebnis die Anzahl der geänderten Datensätze, ansonsten \n 0.","\n","setParamInfo(index, type, input, output):","\n","Kann benutzt werden, um Parameter zu definieren, falls \n beim Anlegen der DbQuery der 3. Parameter (param_infos) nicht angegeben \n wurde.","\n","clearParameters():","\n","setzt die Werte aller Parameter zurück (auf undefined).","\n","clearResults():","\n","gibt die intern für query()/next() allozierten Datenstrukturen \n zurück. Sollte nach query()/next() aufgerufen werden, wenn keine weiteren \n Zeilen gelesen werden sollen, um Ressourcen zu sparen.","\n","close():","\n","schließt die Datenbank-Abfrage.","\n","addBatch():","\n","Fügt das SQL-Statement mit den aktuellen Parametern \n zur Batch-Ausführung hinzu. Die Funktion liefert keinen Rückgabewert.","\n","executeBatch():","\n","Schickt den Batch an Kommandos \n zur Datenbank. Liefert ein Array mit einem Ganzzahlergebnis für jedes \n SQL-Statement im Batch zurück. Bedeutung der Rückgabewerte:","\n","\n\t","\n\t","\n\t","\n\t\t","DbQuery.SUCCESS_NO_INFO","\n\t\t","Das SQL-Satement wurde erfolgreich ausgeführt, \n\t\t aber die Anzahl Reihen konnte nicht ermittelt werden.","\n\t","\n\t","\n\t\t","DbQuery.EXECUTE_FAILED","\n\t\t","Das SQL-Satement wurde nicht erfolgreich \n\t\t ausgeführt, aber die Datenbank hat die Ausführung der nächsten \n\t\t SQL-Statements im Batch fortgesetzt.","\n\t","\n\t","\n\t\t",">= 0","\n\t\t","Anzahl der Datenbankreihen, die vom \n\t\t SQL-Statement betroffen sind.","\n\t","\n","\n"," ","\n"," ","\n","Zu beachten ist, dass die Arrays, die sich auf Datenbank-Parameter \n oder Feldwerte beziehen, entsprechend den JDBC-Konventionen bei Index \n 1 beginnen, nicht wie in JavaScript üblich bei Index 0 (der Eintrag an \n Index 0 ist immer \"undefined\"). Dies gilt nicht für das optional \n an den Konstruktor zu übergebende Array mit Parameter-Definitionen: Dies \n wird in der Regel inline beim Aufruf angegeben (siehe Beispiel unten) \n und da wäre es unschön, immer erst ein leeres Element an den Anfang stellen \n zu müssen.","\n","Die von den Funktionen query() und next() gelieferten \n Arrays enthalten die gleichen Werte, die zusätzlich zum numerischen Index \n (1..n) auch über den Feldnamen indiziert sind (in Großbuchstaben und ohne \n Tabellenpräfix), es ist also z.B. möglich, den gleichen Feldwert als row[1] \n oder als row['ID'] auszulesen. Da Feldnamen nicht eindeutig sein müssen, \n ist das Auslesen über den numerischen Index allerdings sicherer.","\n","Beispiel für den Datenbank-Zugriff:","\n","// list all Jobs for Application Engine instances 4711 \n and 1","\n","var con = new DbCon(\"main\", \"dboper\");","\n","try {","\n","    var qry = new DbQuery(con,","\n","         \"select \n * from ae_cyc_jobs where ae_inst = ?\",","\n","         [ \n { type: con.INTEGER, input: true, output: false} ]);","\n","    try {","\n","         qry.params[1] \n = 4711;","\n","         for \n (var row = qry.query(); row; row = qry.next()) {","\n","            logger.info(\"--- \n new row ---\");","\n","            for \n (var i = 1; i < row.length; ++i) {","\n","                logger.info(\"  field[\" \n + i + \"]: \" +","\n","                   typeof(row[i]) \n + (' = ' + row[i]));","\n","            }","\n","         }","\n","         qry.clearParams();","\n","         qry.params[1] \n = 1;","\n","         for \n (var row = qry.query(); row; row = qry.next()) {","\n","            logger.info(\"--- \n new row ---\");","\n","            for \n (var i = 1; i < row.length; ++i) {","\n","                logger.info(\"  field[\" \n + i + \"]: \" +","\n","                   typeof(row[i]) \n + (' = ' + row[i]));","\n","            }","\n","         }","\n","    } finally {","\n","         qry.close();","\n","    }","\n","} finally {","\n","    con.close();","\n","}","\n"," ","\n\n\n"]],"3":[["DbQuery"]],"id":"38"})