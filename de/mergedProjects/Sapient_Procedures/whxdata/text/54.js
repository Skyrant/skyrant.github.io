rh._.exports({"0":[["DependentTasksSolver"]],"1":[["\n"],["\n","Dieser Objekt-Typ dient dazu, einen Job in voneinander abhängige Aufgaben (\"Tasks\") zerlegen zu können, die dann entsprechend dieser Abhängigkeiten in der jeweils richtigen Reihenfolge abgearbeitet werden. Er wird z.B. in der KPI-Berechnung verwendet um zu bestimmen, welche Berechnungen in welcher Reihenfolge für die jeweilig parametrierten KPIs und aktuellen Daten-Änderungen einer Schicht durchzuführen sind.","\n","Task-Objekte müssen verpflichtend eine Funktion ","execute(solver)"," besitzen, die vom ","DependentTasksSolver"," aufgerufen wird, um die Aufgabe zu erledigen. Falls dies möglich und erfolgt ist, sollte ","execute()"," ","null"," als Rückgabewert liefern. Falls erst andere Aufgaben erledigt werden müssen, bevor mit dieser fortgefahren werden kann, muss ","execute()"," den oder die Namen der betreffenden Tasks zurückgeben (als String bzw. Array von Strings). Der ","DependentTasksSolver"," übergibt an die Methode ","execute()"," der Tasks als einzigen Parameter eine Referenz auf sich selbst. Der Zugriff auf den \"solver\" ermöglicht es execute(), mittels solver.getTask(name) andere Tasks zu finden (und auf deren Eigenschaften und Funktionen zuzugreifen) oder dem Solver weitere Eigenschaften hinzuzufügen (wie in Javascript üblich), um so Daten für die gemeinsame Benutzung mit anderen Tasks zu hinterlegen (z.B. könnte eine Task eine Datenbankverbindung anlegen und im solver hinterlegen, die dann von den anderen Tasks ebenfalls verwendet wird).","\n","Objekte des Typs DependentTasksSolver werden durch ","new DependentTasksSolver(tasks)"," erzeugt. Als Parameter \"tasks\" kann optional gleich ein Initialisierungswert für die gleichnamige Eigenschaft übergeben werden.","\n","Die Ausführung wird mittels ","DependentTasksSolver.run()"," gestartet (die Funktion heißt so, damit sie leicht mit einem ","ThreadPool",", s.o., verwendet werden kann). Als erstes wird die Haupt-Task gesucht, die unter dem Namen \"","main","\" in DependentTasksSolver.tasks eingetragen sein muss. Dann wird deren Funktion execute() so lange aufgerufen, bis sie durch Rückgabe von ","null"," Erfolg meldet. Erklärt sich die Haupt-Task als abhängig von anderen Tasks (indem sie deren Namen aus execute() zurückgibt), wird erst deren execute() aufgerufen u.s.w.","\n","Tasks, die einmal erfolgreiche Ausführung gemeldet haben (durch Rückgabe von null aus execute), werden als erledigt betrachtet: Erklärt sich eine andere Task als abhängig von einer erledigten Task wird letztere nicht erneut ausgeführt, sondern diese Abhängigkeit als erfüllt betrachtet.","\n\n\n"]],"3":[["DependentTasksSolver"]],"id":"54"})