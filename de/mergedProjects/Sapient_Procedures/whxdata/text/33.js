rh._.exports({"0":[["DbQueryBuilder"]],"1":[["\n"],["\n","Objekte dieses Typs dienen zum bequemen Zusammenbauen \n von DbQuery. Eine korrekte Benutzung vorausgesetzt, sichert er die Applikation \n auch gegen SQL-Injections ab, da Parameter-Werte als Bind-Variablen an \n den DB-Server übergeben werden.","\n","Der Konstruktor new DbQueryBuilder hat ein optionales \n Argument, nämlich den Anfang des zu bauenden SQL-Strings.","\n","DbQueryBuilder-Objekte haben folgende Eigenschaften:","\n","empty","\n","Boolean. Gibt an, ob der SQL-String leer ist oder nicht.","\n","sql","\n","Enthält den bislang gebauten SQL-String.","\n"," ","\n","DbQueryBuilder-Objekte haben die folgenden Funktionen:","\n","append(sql_builder, type_val, def, in_val, out, \n val)","\n","Sind alle 5 Argumente angegeben, muss das erste Argument \n ein SQL-String sein, der einen Platzhalter (?) enthält. Das zweite Argument \n ist der Typ der Bind-Variablen (z.B. DbCon, Varchar). Das dritte ist ein \n Boolean, der angibt, ob es sich um einen Input-Parameter handelt. Das \n vierte ist ein Boolean, der angibt, ob das Argument auch als Ausgabe-Parameter \n (out) verwendet werden soll. Das fünfte Argument ist der Wert, der diesem \n Parameter zugewiesen werden soll.","\n","Sind nur 4 Argumente angegeben, ist der Wert nicht \n ausgefüllt. Dieser muss im Anschluss bei DbQery.params gesetzt werden.","\n","Sind nur 3 Argumente angegeben, wird als zweiter Parameter \n eine DbQuery-Paramdef erwartet. Diese enthält die Angaben type_val, def, \n in_val und out.","\n","Sind nur 2 Argumente angegeben, kann es sich dabei \n entweder um einen SQL-String und eine Paramdef handeln, oder um einen \n SQL-String und einen Wert (dann wird versucht, den DB-Feldtyp anhand des \n Wertes zu ermitteln).","\n","Wird nur 1 Argument angegeben, handelt es sich dabei \n entweder um einen Teil eines SQL-Strings oder um einen anderen DbQueryBuilder.","\n","appendFilters(filters)","\n","Spezialfunktion für geskriptete DB-Quellen. Interpretiert \n den JSON-API-Parameter \"Filter\" und macht daraus einen SQL-String.","\n","appendLiteral(text)","\n","Fügt den übergebenen Wert als String-Literal an (d.h., \n mit einfachen Anführungszeichen vorne und hinten und doppelten Anführungszeichen \n innen).","\n","appendRaw(text):","\n","Fügt den übergebenen Text / String hinzu, ohne etwas \n zu überprüfen. Verwendung wird nicht empfohlen.","\n","appendTrailingAnd(text):","\n","Fügt ein AND hinzu, falls noch nicht vorhanden.","\n","appendTrailingOr(text):","\n","Fügt ein OR hinzu, falls noch nicht vorhanden.","\n","appendTrailingSpace(text):","\n","Fügt ein Leerzeichen hinzu, falls noch nicht vorhanden.","\n","clear():","\n","Löscht den bisher gebauten SQL-String.","\n","prepareQuery(Con):","\n","Erzeugt ein DbQuery-Objekt und gibt dieses als Ergebnis \n zurück.","\n","toString():","\n","Liefert das zusammengebaute SQL.","\n"," ","\n","Alle append-Funktionen liefern das DbQueryBuilder-Objekt \n zurück, damit man diese Objekte miteinander verknüpfen kann.","\n\n\n"]],"3":[["DbQueryBuilder"]],"id":"33"})