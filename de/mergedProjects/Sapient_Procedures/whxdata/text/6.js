rh._.exports({"0":[["Über ..."]],"1":[["\n"],["\n","Dieses Dokument beschreibt aufrufbare Methoden von \n Javaklassen, die dazu verwendet werden können, Daten in die Sapient Datenbank \n zu buchen. Die Buchung kann dabei von einem Gateway, der Sapient Engine \n oder dem Client erfolgen.","\n","Außerdem werden die Jobs der Sapient Engine beschrieben.","\n","Die Beschreibung richtet sich an den Legato Support, \n an Datenbankadministratoren sowie an im Umgang mit Datenbankprozeduren \n geschulte Key-User.","\n","Im Dokument werden folgende Symbole und Formatierungen \n verwendet:","\n","\n",":","\n","Stellt einen Sicherheitshinweis dar. Die folgenden \n Informationen warnen vor möglichem Sachschaden, z.B. Datenverlust oder \n mangelnder Funktionalität bei unsachgemäßer Handhabung. Beachten Sie diese \n Hinweise unbedingt!","\n\n\n","\n","\n","INFO:","\n","Hier finden Sie wichtige Informationen über \n die Funktionsweise des Systems. Diese Informationen können Sie dabei unterstützen, \n die Konfiguration korrekt vorzunehmen.","\n\n\n","\n","\n","TIPP:","\n","Hier finden Sie hilfreiche Tipps zur Anwendung.","\n\n\n","\n"," ","\n"],["\n","Die Buchungsprozeduren sind in Java erstellt. Es gibt \n verschiedene Klassen, innerhalb denen wiederum verschiedene Methoden aufgerufen \n werden können.","\n"],["\n",":","\n","Wird bei einer Prozedur keine explizite Zeitzone \n übergeben, erwarten ALLE Prozeduren die Zeitstempel in UTC.","\n"],["\n","Für die Schnittstelle zum Gateway können sowohl JSON-RPC \n als auch JSON-API Daten verwendet werden. Dabei gibt es folgende Einschränkung: \n in einem Response Objekt darf kein Array eingebettet sein (ein Array von \n Response Objekten ist natürlich möglich).","\n","Es gibt folgende Vereinbarung, wie Rückgabewerte aufgebaut \n sein sollen:","\n","Fehler","\n","{\"jsonrpc\":\"2.0\",\"id\":6,\"error\":{\"code\":-32603,\"message\":\"JSON-RPC: \n Internal server error.: Pending alarm for id: null, connection: 10, ext_code: \n 1 not found!,FunctionPath [de/gefasoft/sapient/db/alarms/Alarms/alarm_leaving]\"}}","\n"," ","\n","Erfolgreich (ohne Info im Script)","\n","{\"jsonrpc\":\"2.0\",\"id\":3,\"result\":{\"id\":2}}","\n"," ","\n","Erfolgreich (mit Info im Script)","\n","{\"jsonrpc\":\"2.0\",\"id\":3,\"result\":{\"id\":2}}","\n"," ","\n"],["\n","Die Sapient Engine stellt ihre Dienste via JSON-RPC \n anderen Anwendungen (sowohl Sapient Anwendungen wie der Sapient Web-Applikation, \n SCC, LC2 etc. und Fremd-Anwendungen) zur Verfügung. Dadurch wird ein leichtes \n Protokoll zur Durchführung von RPC (remote procedure call) via HTTP(s) \n POST Anfragen mittel JSON (JavaScript Object Notation) als Datenformat \n sowohl für Anfrage- als auch Rückgabe-Daten festgelegt.","\n","Da die meisten Aufrufe einen angemeldeten Benutzer \n verlangen, der autorisiert ist, die entsprechende Aktion auszuführen, \n müssen sich Client-Anwendungen an der Sapient Engine \"anmelden\", \n ehe sie deren Dienste verwenden können.","\n","Interaktive Clients (wie die Sapient Web-Applikation) \n zeigen das Login-Formular der Sapient Engine an und fordern den Benutzer \n auf, sich anzumelden.","\n","Nicht-interaktive Clients (wie der SCC) brauchen einen \n eigenen Sapient Benutzer und verwenden üblicherweise HTTP Basic Authentication \n bei der ersten HTTP Anforderung, um sich an der Sapient Engine anzumelden. \n Die Sapient Engine verwendet immer HTTP-Sessions, die durch einen \"Session \n Cookie\" namens \"JSESSIONID\" aufgebaut wurden und merkt \n sich den angemeldeten Benutzer für jede Session. Client-Anwendungen, die \n Dienste der Sapient Engine verwenden, wird dringend empfohlen, ebenfalls \n diesen HTTP-Session-Mechanismus zu verwenden anstatt sich via HTTP Basic \n Authentication HTTP Header bei jedem Aufruf anzumelden. Die Verwendung \n der angebotenen Sessions ist sowohl schneller (weil so nicht für jeden \n Aufruf die Berechtigungen des Benutzers in der Datenbank nachgeschlagen \n werden müssen) und spart Ressourcen auf der Sapient Engine ein (da nicht \n verwendete Sessions relativ lange im Speicher verbleiben).","\n"],["\n","Manchmal wird ein JSON-RPC Aufruf überflüssig, ehe \n er vollständig ausgeführt wurde. Dies geschieht beispielsweise, wenn sich \n ein Benutzer durch Teiler der WebApplikation klickt, ohne darauf zu warten, \n dass die Daten vollständig geladen sind. Solche Datenabfragen können eine \n signifikante Last auf der Sapient Engine und der Datenbank verursachen, \n ohne irgendetwas zu bewirken.","\n","Daher wurde eine neue JSON-RPC Prozedur ","cancelRPC"," \n in die Sapient Engine integriert.","\n","Die Prozedur erwartet einen einzigen Parameter ","IDS",", der die ID des abzubrechenden \n RPC Aufrufs enthält. Es ist auch möglich, mehrere IDs als Array zu übergeben.","\n","Die Prozedur ist dazu gedacht, als JSON-RPC Notification \n (die kein Ergebnis zurückliefert) aufgerufen zu werden. Sie kann aber \n auch als Funktion aufgerufen werden. In diesem Fall wird ein Ergebnis-Objekt \n mit einem einzigen Element, \"rows\", zurückgegeben, das die Anzahl \n der abgebrochenen RPC Aufrufe enthält.","\n",":","\n","Bitte beachten Sie, dass diese Prozedur nur \n RPC Aufrufe abbricht, die vom gleichen Client in der gleichen HTTP-Session \n gestartet wurden.","\n","Nachdem dies auch bedeutet, dass keine Aufrufe anderer \n Benutzer abgebrochen werden können, benötigt die Prozedur keine speziellen \n Benutzerrechte.","\n","Die SQLExceptions, die erstellt werden, wenn ein SQL-Statement \n abgebrochen wird, werden in SapientError Exceptions mit einem spezifischen \n Fehlercode umgewandelt. Der Fehlercode hängt nicht mit dem Datenbanktyp \n zusammen (PostgreSQL oder Oracle). Die Fehler werden von der Sapient Engine \n geloggt.","\n"],["\n","Wann immer die Sapient Engine nach Updates in Konfigurationstabellen \n der Datenbank sucht, sucht sie auch nach Updates in allen Datenquellen-Skripten. \n Gab es Updates seitdem die aktuelle Version des Repository geladen wurde, \n wird das Repository neu geladen.","\n","Die Überprüfung der Datenquellen-Skripte auf Updates \n wird auch durchgeführt, wenn ein \"reload repository if stale\" \n mittels reloadRepository(true) via JMX oder JSON-RPC angefordert wird.","\n","Die durchgeführte Überprüfung kann jedoch keine neuen \n Skripte entdecken, die in den jeweiligen Verzeichnissen deployt wurden. \n Um diese zu laden, muss ein Neuladen des Repositories erzwungen werden, \n indem man reloadRepository(false) entweder via JMX oder JSON-RPC aufruft.","\n","Die Überprüfung von Skripten auf Updates erhöht die \n Aktivität auf dem Dateisystem. In produktiven Umgebungen kann sie daher \n deaktiviert werden, indem man den Parameter \"updateCheckSeconds\" \n der Task \"functions\" auf einen Wert kleiner/gleich 0 setzt.","\n\n\n"]],"3":[["Zeitzone"],["Rückgabewerte"],["JSON-RPC-Prozeduren \n aus externen Anwendungen verwenden"],["JSON-RPC Aufrufe abbrechen"],["Skripte \n auf Updates überprüfen"]],"5":[["JSON-RPC,Rückgabewerte,Zeitzone"]],"6":[["Über dieses Dokument"],["Allgemeines"]],"id":"6"})