rh._.exports({"0":[["Grundlagen der SE-Jobs"]],"1":[["\n"],["\n"],["\n","Die Sapient Engine (SE) führt \n in einem wählbaren Zeitraster Systemfunktionen aus. Diese Funktionen sind \n in Form eines Java-Skripts (Java) implementiert."," ","\n","Jobs der Sapient Engine werden im LC2 (Systemadministration \n - Sapient Engine - SE Jobs) parametriert und setzen sich aus folgenden \n Angaben zusammen:","\n","\n\t","\n\t","\n\t","\n\t\t","Symbol:","\n\t\t","Eindeutiges \n\t\t Symbol des Jobs.","\n\t","\n\t","\n\t\t","Name:","\n\t\t","Frei \n\t\t vergebbarer Name des Jobs.","\n\t","\n\t","\n\t\t","Beschreibung:","\n\t\t","Frei \n\t\t vergebbare Beschreibung des Jobs.","\n\t","\n\t","\n\t\t","Modul:","\n\t\t","Verweis \n\t\t auf ein Systemmodul, für das dieser Job relevant ist, z.B. Meldesystem, \n\t\t Messwerte, etc. Optional.","\n\t","\n\t","\n\t\t","SE-Instanz:","\n\t\t","Sapient \n\t\t Engine Instanz.","\n\t\t","Je nach Systemauslastung \n\t\t kann die Sapient Engine in mehreren Instanzen ausgeführt werden. \n\t\t Die SE-Instanzen müssen in P_MODULES eingetragen werden. Dabei \n\t\t ist der Modul-Typ auf \"Sapient Engine\" zu setzen und \n\t\t als \"Projekt-ID\" die Instanznummer anzugeben."," "," ","\n\t","\n\t","\n\t\t","Scheduler:","\n\t\t","Scheduler \n\t\t für den Job. Default ist 'main'.","\n\t","\n\t","\n\t\t","Funktions-Pfad:","\n\t\t","Pfad \n\t\t / URL der aufzurufenden Funktion (Skript oder Java).","\n\t","\n\t","\n\t\t","Parameter \n\t\t (JSON):","\n\t\t","In \n\t\t diesem Feld werden weitere Parameter, die zur Ausführung des Jobs \n\t\t notwendig sind, angegeben.","\n\t\t","Aufbau des Feldes und Beispiel-Parameter \n\t\t eines Jobs:","\n\t\t","{","\n\t\t","\"threads\": 1,","\n\t\t","\"queue\": 10,","\n\t\t","\"ShiftsPartition\": \"\",","\n\t\t","\"SortShiftsByNodeLevel\": false","\n\t\t","}","\n\t\t","Da der Aufbau dieses Feldes von Job \n\t\t zu Job sehr unterschiedlich ist, wird in der Beschreibung der \n\t\t einzelnen Jobs näher darauf eingegangen.","\n\t","\n\t","\n\t\t","Timeout \n\t\t (s) (optional):","\n\t\t","Timeout \n\t\t für die Ausführung des Jobs (in Sekunden). Dient der Überwachung \n\t\t von Jobs. Wenn NULL, findet keine Jobüberwachung statt.","\n\t","\n\t","\n\t\t","Letzter \n\t\t Start:","\n\t\t","Kein \n\t\t Parameter, wird vom Job gesetzt.","\n\t\t","Zeitstempel; wann der Job das letzte \n\t\t Mal gestartet wurde.","\n\t","\n\t","\n\t\t","Letzte \n\t\t Ausführung:","\n\t\t","Kein \n\t\t Parameter, wird vom Job gesetzt.","\n\t\t","Zeitstempel; wann der Job das letzte \n\t\t Mal ausgeführt (beendet) wurde.","\n\t","\n\t","\n\t\t","Letzte \n\t\t Fehlermeldung:","\n\t\t","Kein \n\t\t Parameter, wird vom Job gesetzt.","\n\t\t","Falls die letzte Ausführung zu einem \n\t\t Fehler führte, der Fehlertext. Falls letzte Ausführung okay, NULL.","\n\t","\n","\n"," ","\n"],["\n","Die Jobs werden nach Zeitplänen (Triggern) ausgeführt. \n Welche Trigger für einen Job verwendet werden, wird im LC2 unter System-Administration \n - Sapient Engine - Job-Trigger definiert. ","Um auch \n komplexe Zeitpläne abzubilden, können jedem Job auch mehrere Trigger zugeordnet \n werden (z.B. einen für jeden Werktag und einen anderen fürs Wochenende).","\n","Der jeweilige Standard-Trigger \n mit dem Standard-Intervall werden bei den jeweiligen Jobs genannt.","\n","Die verfügbaren \n Trigger-Typen und die zugehörigen Parameter sind im nächsten Kapitel beschrieben.","\n"],["\n","Einige SE-Job-Prozeduren können nicht korrekt laufen, \n wenn sie gleichzeitig von mehreren Jobs der gleichen oder verschiedener \n Sapient Engine Instanzen ausgeführt werden.","\n","Damit solche Jobs parallele Ausführungen entdecken \n und verhindern können, wird ein zusätzlicher Bool'scher Parameter an jede \n Job-Prozedur übergeben. Dieser Parameter gibt an, ob bereits Ausführungen \n des Jobs vor diesem Start aktiv waren.","\n","Bevor die neue Startzeit des Jobs in die Datenbank \n geschrieben wird, fragt die Task \"jobs\" der Sapient Engine in \n der Datenbank weitere Ausführungen desselben Jobs ab, die noch aktiv sind. \n Das Ergebnis dieser Überprüfung wird dann als neuer Bool'scher Parameter \n \"parallel_exec\" an die Prozedur übergeben.","\n","Job-Prozeduren, die exklusiv ausgeführt werden müssen, \n sollten diesen Parameter beim Start überprüfen und die Ausführung mit \n einem Fehler abbrechen, wenn der Rückgabewert \"true\" war.","\n","Zum Beispiel der Job HANDLE_EVENTS (Funktionspfad: \n /de/gefasoft/sapient/db/shift/HandleEvents/execute) prüft diesen neuen \n Parameter parallel_exec. Wird dieser Job bereits ausgeführt, wird eine \n ConcurrentModificationException geworfen, die auch in SE_JOB_EXECUTIONS \n geschrieben wird.","\n","Der Code sieht folgendermaßen aus:","\n","ArgsMap args = ArgsMap.getInstance(params, DEF_SHIFT_END);","\n","Object isParallel = args.getMapEntry(\"job_params\", \n \"parallel_exec\");","\n","if (isParallel != null && \"true\".equalsIgnoreCase( \n isParallel.toString() )) {","\n","String msg = \"The procedure HandleEvents/execute \n is executed already by another process. Please check your configuration. \n \"","\n","+ \"Current Trigger symbol: \" + String.valueOf(args.get(\"trigger_symbol\"));","\n","logger.error(msg);","\n","throw new ConcurrentModificationException(msg);","\n","}","\n"," ","\n\n\n"]],"2":[["Grundlagen der Jobs"]],"3":[["Job-Details"],["Trigger"],["Verhinderung gleichzeitiger \n Ausführung"]],"5":[["Job,SE Job"]],"id":"21"})