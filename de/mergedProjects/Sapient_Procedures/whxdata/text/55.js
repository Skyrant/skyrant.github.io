rh._.exports({"0":[["TimeRangeSet"]],"1":[["\n"],["\n","Dieser Objekt-Typ dient dazu, eine aufsteigend sortierte \n Menge von überlappungsfreien Zeit-Intervallen zu verwalten. Die Intervalle \n werden als JavaScript-Objekte mit den Eigenschaften \"lo\" und \n \"hi\" dargestellt, wobei es sich im mathematischen Sinne um \"oben \n offene Intervalle\" handelt, d.h. die untere Grenze (lo) ist im Intervall \n enthalten, die Obere (hi) nicht. Beim Lesen aus TimeRangeSet werden Zeitpunkte \n immer als JavaScript Date-Objekt geliefert, beim Schreiben werden auch \n numerische Angaben (Millisekunden-Zeitstempel wie von Date.getTime() geliefert) \n akzeptiert.","\n","Beim Hinzufügen von Intervallen zu einem TimeRangeSet \n werden gegebenenfalls überlappende oder aneinander angrenzende Intervalle \n zusammengefasst, beim Löschen werden nötigenfalls enthaltene Intervalle \n aufgeteilt.","\n","Damit die Intervalle in einem TimeRangeSet-Objekt in \n Schleifen durchlaufen werden können, bietet das Objekt die Eigenschaften \n \"first\" und \"last\", sowie die Methoden \"next()\" \n und \"prev()\" an. Die Liste kann dadurch in aufsteigender Reihenfolge \n z.B. so durchlaufen werden:","\n","for (var range = set.first; range; range = set.next()) \n {…}","\n"," ","\n","in absteigender Reihenfolge z.B. so:","\n","for (var range = set.last; range; range = set.prev()) \n {…}","\n"," ","\n","TimeRangeSet-Objekte haben folgende Eigenschaften:","\n","empty (Boolean, readonly):","\n","True, wenn die Liste leer ist.","\n","length (Zahl, readonly):","\n","Anzahl der nicht überlappenden Zeit-Intervalle in der \n Liste.","\n","millis (Zahl, readonly):","\n","Gesamtdauer aller enthaltenen Zeit-Intervalle der Liste.","\n","min (Date, read/write):","\n","Frühester in der Liste enthaltener Zeitpunkt. Beim \n Schreiben auf diese Eigenschaft wird die Liste so gekürzt, dass sie keine \n Zeitpunkte mehr enthält, die vor dem geschriebenen Wert liegen. Die Liste \n bleibt unverändert, wenn auf \"min\" ein Wert geschrieben wird, \n der kleiner als der aktuelle Wert ist. Beim Schreiben kann der Wert als \n Date-Objekt oder als Zahl (Millisekunden, wie von Date.getTime() geliefert) \n angegeben werden.","\n","max (Date, read/write):","\n","Spätester gerade nicht mehr in der Liste enthaltener \n Zeitpunkt. Beim Schreiben auf diese Eigenschaft wird der Inhalt der Liste \n so gekürzt, dass sie nur noch Zeitpunkte enthält, die vor dem geschriebenen \n Wert liegen. Die Liste bleibt unverändert, wenn ein Wert geschrieben werden \n soll, der größer als der aktuelle Wert ist. Zum Schreiben kann entweder \n ein Date-Objekt oder ein Millisekunden-Wert benutzt werden.","\n","range (Object, read/write):","\n","Das alle Werte der Liste umfassende Intervall. Enthält \n beim Lesen ein Objekt mit den beiden Eigenschaften \"lo\" und \n \"hi\", beide vom Typ Date. \"lo\" enthält den frühesten \n in der Liste enthaltenen Zeitpunkt, \"hi\" den Zeitpunkt eine \n Millisekunde nach dem spätesten in der Liste enthaltenen Zeitpunkt. Beim \n Schreiben wird der Inhalt der Liste so gekürzt, dass alle in der Liste \n enthaltenen Werte im übergebenen Intervall liegen. Beim Schreiben können \n die Zeitpunkte außer als Date-Objekte auch als Millisekunden-Werte übergeben \n werden.","\n","first (Object, readonly):","\n","Erstes (frühestes) in der Liste enthaltenes Intervall. \n Objekt mit zwei Eigenschaften vom Typ Date namens \"lo\" und \"hi\".","\n","last (Object, readonly):","\n","Letztes (spätestes) in der Liste enthaltenes Intervall. \n Objekt mit zwei Eigenschaften vom Typ Date namens \"lo\" und \"hi\".","\n","current (Object, readonly):","\n","Aktuelles Intervall beim Durchlaufen der Liste mittels \n \"next()\" und \"prev()\".","\n"," ","\n","Außerdem bieten TimeRangeSet-Objekte noch folgende \n Methoden:","\n","add(...):","\n","Fügt ein Intervall zum TimeRangeSet hinzu. Kann mit \n einem oder zwei Parametern auf verschiedene Arten aufgerufen werden:","\n","add(timestamp): Mit einem einzelnen Parameter \n vom Typ Date oder Zahl (Zeitpunkt als Millisekunden) aufgerufen, fügt \n den angegebenen einzelnen Zeitpunkt (Intervall ab \"timestamp\" \n bis \"timestamp\" + 1) der Liste hinzu.","\n","add(range): Wird \"add\" mit einem einzigen \n Parameter aufgerufen, der ein Objekt darstellt, welches Eigenschaften \n \"lo\" und \"hi\" hat, fügt dies das Intervall von \"lo\" \n bis \"hi\" dem TimeRangeSet hinzu.","\n","add(set): Ist der einzige angegebene Parameter \n ein anderes TimeRangeSet, so werden alle in jenem enthaltenen Zeit-Intervalle \n dieser Liste hinzugefügt.","\n","add(lo, hi): Beim Aufruf mit zwei Parametern werden \n diese als Unter- und Obergrenze eines Zeit-Intervalls betrachtet und dieses \n der Liste hinzugefügt.","\n"," ","\n","remove(...):","\n","Entfernt alle angegebenen Zeitpunkte aus der Liste. \n Kann mit folgenden Parametern aufgerufen werden:","\n","remove(timestamp): Entfernt den einzelnen angegebenen \n Zeitpunkt (Intervall ab \"timestamp\" bis \"timestamp + 1\") \n aus dem TimeRangeSet. Der Parameter kann als Date-Objekt oder als Millisekunden-Wert \n angegeben werden.","\n","remove(range): Entfernt alle Zeitpunkte aus dem \n angegebenen Intervall aus der Liste. Das übergebene Objekt muss Eigenschaften \n \"lo\" und \"hi\" haben, die Start- und Ende-Zeitpunkt \n als Date-Objekt oder Millisekunden-Wert angeben.","\n","remove(set): Bei Aufruf mit einem anderen TimeRangeSet \n als einzigem Parameter werden alle im übergebenen TimeRangeSet enthaltenen \n Zeitpunkte aus dieser Liste entfernt.","\n","remove(hi, lo): Unter- und Obergrenze eines zu \n entfernenden Intervalls können auch als getrennte Parameter angegeben \n werden, wie üblich als Date- oder Millisekunden-Wert.","\n"," ","\n","removeFirst():","\n","Entfernt das erste (früheste) Intervall aus der Liste \n und liefert es als Objekt mit den Eigenschaften \"lo\" und \"hi\" \n (beide vom Type Date) als Ergebnis.","\n","removeLast():","\n","Entfernt das letzte (späteste) Intervall aus der Liste \n und gibt es als Ergebnis zurück.","\n","clear():","\n","Leert die Liste (entfernt alle enthaltenen Intervalle \n daraus).","\n","contains(…):","\n","Ergibt true, falls alle übergebenen Zeitpunkte im TimeRangeSet \n enthalten sind, ansonsten false. Die zu prüfenden Zeitpunkte können wie \n bei add(...) oder remove(...) auf verschiedene Arten angegeben werden.","\n","overlaps(...):","\n","Ergibt true, falls mindestens einer der übergebenen \n Zeitpunkte im TimeRangeSet enthalten ist. Kann die gleichen Parameter \n verarbeiten wie add(...) oder remove(...).","\n","commonMillis(...):","\n","Berechnet die Anzahl Millisekunden, die sowohl im übergebenen \n Intervall oder TimeRangeSet als auch in dieser Liste enthalten sind (summierte \n Dauer aller Überlappungen). Kann auf die gleiche Art und Weise aufgerufen \n werden wie auch add(...) und remove(...).","\n","next():","\n","Schaltet zum nächsten Intervall in dem TimeRangeSet \n weiter und liefert dieses zurück als Objekt mit den Eigenschaften \"lo\" \n und \"hi\" (jeweils vom Typ Date), Am Ende der Liste ist das Ergebnis \n null. Wird beim Iterieren über die Liste verwendet (siehe einleitende \n Beschreibung oben).","\n","prev():","\n","Schaltet zum nächst-niedrigeren (früheren) Intervall \n in der Liste und liefert dieses Intervall als Objekt mit den beiden Eigenschaften \n \"lo\" und \"hi\" (Date) als Ergebnis. Am Anfang der Liste \n ist das Ergebnis null. Wird beim Iterieren der Liste in absteigender Richtung \n benutzt (s.o.).","\n","toArray():","\n","Liefert alle Intervalle aus dem TimeRangeSet als Array \n von Objekten, deren jedes die Grenzen eines Intervalls als Date-Eigenschaften \n \"lo\" und \"hi\" angibt. Die Intervalle im Array sind \n aufsteigend sortiert.","\n\n\n"]],"3":[["TimeRangeSet"]],"id":"55"})