rh._.exports({"0":[["ThreadPool"]],"1":[["\n"],["\n","Objekte dieses Typs erlauben die parallele Abarbeitung von Operationen innerhalb eines einzigen Scripts. Dies eignet sich besonders für Jobs, die mehrere voneinander unabhängige und potentiell langwierige Aufrufe von externen Servern durchführen müssen (z.B. Up-/Download von Dateien, Aufruf von Web-Services o.ä.), da dann alle diese Aufrufe parallel stattfinden können.","\n","Der Typ ThreadPool hat folgende Eigenschaften und Funktionen:","\n","Konstruktor ThreadPool(name, threadcount):","\n","Dient zum Erzeugen von Threadpool-Objekten, wobei optional gleich dessen Name (siehe Eigenschaft \"name\") und die maximale Anzahl Threads für diesen Pool vorgegeben werden können. Beispiel: var tp = new ThreadPool('downloads', 3).","\n","Eigenschaft name (readwrite):","\n","Der Name des Thread-Pools. Wird zum Benennen der Threads benutzt (erscheint z.B. in Logmeldungen). Kann nur geändert werden, wenn der Thread-Pool nicht (oder nicht mehr) läuft (siehe Eigenschaft \"running\").","\n","Eigenschaft threadcount (readwrite):","\n","Maximale Anzahl zu erzeugender Threads (parallel ablaufende Operationen). Kann nur geändert werden, wenn der Thread-Pool nicht (oder nicht mehr) läuft (siehe Eigenschaft \"running\").","\n","Eigenschaft running (readonly):","\n","Gibt an, ob Threads im Pool laufen. Wird \"true\", wenn die erste Operation gestartet wird, wird \"false\", wenn waitTillDone() beendet wurde.","\n",":","\n","Die Threads im Pool laufen weiter, auch wenn alle Operationen beendet sind, es könnten ja jederzeit neue Operationen hinzukommen.","\n","Funktion exec(operation):","\n","Startet die angegebene Operation. Dies kann sein:","\n\n","eine Zeichenkette: wird wie mittels \"eval()\" ausgewertet.","\n\n","eine Funktion: wird in einem Thread aufgerufen.","\n\n","ein Objekt: falls es eine Funktion \"run()\" enthält, wird diese aufgerufen.","\n\n","ein Java-Runnable: seine Methode \"run()\" wird aufgerufen.","\n\n","ein Java-Callable: seine Methode \"call()\" wird aufgerufen.","\n\n"," ","\n","Der Aufruf von exec(operation) gibt ein Objekt vom Typ AsyncResult zurück (siehe unten).","\n","Funktion waitTillDone():","\n","Wartet, bis alle Operationen beendet sind und stoppt alle Threads im Pool","\n"," ","\n","Das von ","exec(operation)"," zurückgegebene ","AsyncResult","-Objekt hat folgende Eigenschaften und Methoden:","\n","Funktion cancel(mayInterrupt):","\n","Bricht die Ausführung der betreffenden Operation ab. Sofern sie noch nicht begonnen hat, wird sie aus der Warteschlange gelöscht. Bereits gestartete Operationen werden nur abgebrochen, wenn \"mayInterrupt\" als true angegeben ist.","\n","Funktion awaitResult():","\n","wartet auf Beendigung der Operation und gibt deren Ergebnis zurück:","\n\n","bei Auswertung einer Zeichenkette das Ergebnis des letzten darin vorkommenden Ausdrucks","\n\n","bei Auswertung einer Funktion deren Ergebnis","\n\n","bei Auswertung eines Objekts oder Java-Runnable: das Objekt","\n\n","bei Auswertung eines Java-Callable das Ergebnis der Methode \"call()\"","\n\n"," ","\n","Falls bei der Abarbeitung der asynchronen Operation eine Ausnahme aufgetreten ist, gibt awaitResult() ein Java-ExecutionException-Objekt zurück, das die eigentliche Ausnahme über getCause() zur Verfügung stellt.","\n","Eigenschaft done (readonly):","\n","Gibt an, ob die Operation beendet ist.","\n","Eigenschaft cancelled (","readonly):","\n","G","ibt an, ob die Operation abgebrochen wurde.","\n"," ","\n","Jeder ThreadPool enthält eine bestimmte Anzahl von Threads. Es können mehr Aufgaben an einen ThreadPool delegiert werden, als dieser Threads enthält. Überzählige Aufgaben werden in eine Warteschlange eingereiht und ausgeführt, sobald eine andere fertig wird.","\n\n\n"]],"3":[["ThreadPool"]],"id":"45"})